# Here is what you can do:

# tox                    # run tests with pytest (you can pass extra arguments
#                          for pytest, e.g., "tox -- --update-goldens")
# tox -e regexlint       # lint regular expressions with regexlint
# tox -e pylint          # lint code with pylint
# tox -e check           # perform various checks, including linting with pyflakes
# tox -e mapfiles        # regenerate map files
# tox -e coverage        # run tests and output a coverage report
# tox -e doc             # compile documentation (you can pass extra arguments for
#                          for Sphinx, e.g., "tox -e doc -- -b dirhtml" to select the
#                          dirhtml builder)
# tox -e web-doc         # compile documentation with demo support (uses Pyodide to
#                          build Pygments for WASM)

[tox]
envlist = py

[testenv]
description =
  run tests with pytest (you can pass extra arguments for pytest,
  e.g., "tox -- --update-goldens")
deps =
    pytest >= 7.0
    pytest-cov
    pytest-randomly
    wcag-contrast-ratio
commands = pytest {posargs}

[testenv:regexlint]
description =
  lint regular expressions with regexlint
deps =
    git+https://github.com/pygments/regexlint.git@master
commands = regexlint pygments.lexers


[testenv:pylint]
description =
  lint code with pylint
deps =
  pylint
commands =
  pylint --rcfile scripts/pylintrc pygments


[testenv:check]
description =
  miscellaneous checks on the source code, including pyflakes
deps =
  flake8
commands =
  # FIXME: What is build/ ??
  python scripts/check_crlf.py pygments build external
  python scripts/detect_missing_analyse_text.py --skip-no-aliases
  # We only use pyflakes, not pycodestyle, but use it through flake8 nevertheless
  # to be able to use the --ignore option.
  # TODO: ignore result like in Makefile?
  flake8 --select F --ignore F401 pygments
  python scripts/check_sources.py -i build -i dist -i pygments/lexers/_mapping.py \
        -i docs/build -i pygments/formatters/_mapping.py -i pygments/unistring.py \
        -i tests/support/empty.py
  python scripts/count_token_references.py --minfiles=1 --maxfiles=1 \
                                           --minlines=1 --maxlines=3 --subtoken

[testenv:mapfiles]
description =
  regenerate map files
deps =
commands =
  python scripts/gen_mapfiles.py


[testenv:coverage]
description =
  run tests, and generate a coverage report in htmlcov/
commands =
  pytest --cov --cov-report=html --cov-report=term {posargs}


[testenv:doc]
description =
  compile documentation with Sphinx. You can pass a builder name,
  like "tox -e doc -- latex". You can also add extra options, like
  "SPHINXOPTS='-D latex_paper_size=letter' tox -e doc -- latex".
change_dir = doc
deps =
  sphinx
  wcag-contrast-ratio
commands =
  sphinx-build -b {posargs:html} {env:SPHINXOPTS} . _build/{posargs:html}


[testenv:web-doc]
description =
  same as doc, but also build the demo by compiling Pygments to WASM.
change_dir = doc
deps = {[testenv:doc]deps}
allowlist_externals =
  docker
setenv =
  # Enable the BuildKit backend to use the --output option.
  DOCKER_BUILDKIT = 1
  # Build the demo page.
  WEBSITE_BUILD = 1
commands =
  docker build --file pyodide/Dockerfile --output _build/pyodide/pyodide .
  sphinx-build -b {posargs:html} {env:SPHINXOPTS} . _build/{posargs:html}
