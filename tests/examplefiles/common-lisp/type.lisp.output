';;;; TYPEP und Verwandtes' Comment.Single
'\n'          Text.Whitespace

';;;; Michael Stoll, 21. 10. 1988' Comment.Single
'\n'          Text.Whitespace

';;;; Bruno Haible, 10.6.1989' Comment.Single
'\n'          Text.Whitespace

';;;; Sam Steingold 2000-2005' Comment.Single
'\n\n'        Text.Whitespace

';;; Datenstrukturen für TYPEP:' Comment.Single
'\n'          Text.Whitespace

';;; - Ein Type-Specifier-Symbol hat auf seiner Propertyliste unter dem' Comment.Single
'\n'          Text.Whitespace

';;;   Indikator SYS::TYPE-SYMBOL eine Funktion von einem Argument, die' Comment.Single
'\n'          Text.Whitespace

';;;   testet, ob ein Objekt vom richtigen Typ ist.' Comment.Single
'\n'          Text.Whitespace

';;; - Ein Symbol, das eine Type-Specifier-Liste beginnen kann, hat auf seiner' Comment.Single
'\n'          Text.Whitespace

';;;   Propertyliste unter dem Indikator SYS::TYPE-LIST eine Funktion von' Comment.Single
'\n'          Text.Whitespace

';;;   einem Argument für das zu testende Objekt und zusätzlichen Argumenten' Comment.Single
'\n'          Text.Whitespace

';;;   für die Listenelemente.' Comment.Single
'\n'          Text.Whitespace

';;; - Ein Symbol, das als Typmacro definiert wurde, hat auf seiner Property-' Comment.Single
'\n'          Text.Whitespace

';;;   liste unter dem Indikator SYSTEM::DEFTYPE-EXPANDER den zugehörigen' Comment.Single
'\n'          Text.Whitespace

';;;   Expander: eine Funktion, die den zu expandierenden Type-Specifier (eine' Comment.Single
'\n'          Text.Whitespace

';;;   mindestens einelementige Liste) als Argument bekommt.' Comment.Single
'\n\n'        Text.Whitespace

'('           Punctuation
'in-package'  Name.Builtin
' '           Text.Whitespace
'"EXT"'       Literal.String
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'export'      Name.Builtin
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'type-expand' Name.Variable
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'in-package'  Name.Builtin
' '           Text.Whitespace
'"SYSTEM"'    Literal.String
')'           Punctuation
'\n\n'        Text.Whitespace

'; vorläufig, solange bis clos.lisp geladen wird:' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'eval-when'   Keyword
' '           Text.Whitespace
'('           Punctuation
'eval'        Name.Builtin
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'predefun'    Name.Variable
' '           Text.Whitespace
'clos::built-in-class-p' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'object'      Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'object'      Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'fboundp'     Name.Builtin
' '           Text.Whitespace
"'clos::class-name" Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'clos::class-name' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'c'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'c'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'typespec-error' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'fun'         Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'error-of-type' Name.Variable
' '           Text.Whitespace
"'error"      Literal.String.Symbol
'\n    '      Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: invalid type specification ~S"' Literal.String
')'           Punctuation
'\n    '      Text.Whitespace
'fun'         Name.Variable
' '           Text.Whitespace
'type'        Keyword
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n\n'        Text.Whitespace

';; ============================================================================' Comment.Single
'\n\n'        Text.Whitespace

';; return the CLOS class named by TYPESPEC or NIL' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'clos-class'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'typespec'    Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'cc'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
"'CLOS::CLOSCLASS" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'cc'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos::defined-class-p' Name.Variable
' '           Text.Whitespace
'cc'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos:class-name' Name.Variable
' '           Text.Whitespace
'cc'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n      '    Text.Whitespace
'cc'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';;; TYPEP, CLTL S. 72, S. 42-51' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'typep'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'env'         Name.Variable
' '           Text.Whitespace
'&aux'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'; x = Objekt, y = Typ' Comment.Single
'\n  '        Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'env'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'expand-deftype' Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'TYPE-SYMBOL" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'DEFSTRUCT-DESCRIPTION" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'ds-typep'    Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'f'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos-class'  Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
"; It's not worth handling structure classes specially here." Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'clos::typep-class' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'f'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'SATISFIES"  Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'error-of-type' Name.Variable
' '           Text.Whitespace
"'error"      Literal.String.Symbol
'\n                ' Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to SATISFIES must be a symbol: ~S"' Literal.String
')'           Punctuation
'\n                ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n            ' Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'symbol-function' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
't'           Name.Constant
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'MEMBER"     Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'member'      Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
't'           Name.Constant
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'EQL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'NOT"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'AND"        Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'OR"         Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'apply'       Name.Builtin
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::defined-class-p' Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'clos::typep-class' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::eql-specializer-p' Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos::eql-specializer-singleton' Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'encodingp'   Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'charset-typep' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n\n'        Text.Whitespace

';; ----------------------------------------------------------------------------' Comment.Single
'\n\n'        Text.Whitespace

';; UPGRADED-ARRAY-ELEMENT-TYPE is a lattice homomorphism, see' Comment.Single
'\n'          Text.Whitespace

';; ANSI CL 15.1.2.1.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'environment' Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'environment' Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
';; see array.d' Comment.Single
'\n  '        Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'BIT'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'BIT"        Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'CHARACTER'   Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'T'           Name.Constant
')'           Punctuation
' '           Text.Whitespace
"'T"          Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'('           Punctuation
'NIL'         Name.Constant
')'           Punctuation
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'subtypep'    Name.Builtin
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
'\n         ' Text.Whitespace
"'NIL"        Literal.String.Symbol
'\n         ' Text.Whitespace
'('           Punctuation
'multiple-value-bind' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'sys::subtype-integer' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n           ' Text.Whitespace
'; Es gilt (or (null low) (subtypep type `(INTEGER ,low ,high)))' Comment.Single
'\n           ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'minusp'      Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'l'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'integer-length' Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n               ' Text.Whitespace
'; Es gilt (subtypep type `(UNSIGNED-BYTE ,l))' Comment.Single
'\n               ' Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'BIT"        Literal.String.Symbol
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'4'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'4'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'8'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'8'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'16'          Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'16'          Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'l'           Name.Variable
' '           Text.Whitespace
'32'          Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'32'          Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
"'T"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'subtypep'    Name.Builtin
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
')'           Punctuation
'\n               ' Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
'\n               ' Text.Whitespace
"'T"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';; ----------------------------------------------------------------------------' Comment.Single
'\n\n'        Text.Whitespace

';; UPGRADED-COMPLEX-PART-TYPE is a lattice homomorphism, see' Comment.Single
'\n'          Text.Whitespace

';; HyperSpec/Body/fun_complex.html and HyperSpec/Body/syscla_complex.html,' Comment.Single
'\n'          Text.Whitespace

';; and an idempotent. Therefore' Comment.Single
'\n'          Text.Whitespace

';;   (subtypep (upgraded-complex-part-type T1) (upgraded-complex-part-type T2))' Comment.Single
'\n'          Text.Whitespace

';; is equivalent to' Comment.Single
'\n'          Text.Whitespace

';;   (subtypep T1 (upgraded-complex-part-type T2))' Comment.Single
'\n'          Text.Whitespace

';; (Proof: Let U T be an abbreviation for (upgraded-complex-part-type T).' Comment.Single
'\n'          Text.Whitespace

';;  If U T1 <= U T2, then T1 <= U T1 <= U T2.' Comment.Single
'\n'          Text.Whitespace

';;  If T1 <= U T2, then by homomorphism U T1 <= U U T2 = U T2.)' Comment.Single
'\n'          Text.Whitespace

';;'          Comment.Single
'\n'          Text.Whitespace

';; For _any_ CL implementation, you could define' Comment.Single
'\n'          Text.Whitespace

";;   (defun upgraded-complex-part-type (type) 'REAL)" Comment.Single
'\n'          Text.Whitespace

';; Likewise for _any_ CL implementation, you could define' Comment.Single
'\n'          Text.Whitespace

';;   (defun upgraded-complex-part-type (type) type)' Comment.Single
'\n'          Text.Whitespace

';; or - again for _any_ CL implementation:' Comment.Single
'\n'          Text.Whitespace

';;   (defun upgraded-complex-part-type (type)' Comment.Single
'\n'          Text.Whitespace

";;     (cond ((subtypep type 'NIL) 'NIL)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'SHORT-FLOAT) 'SHORT-FLOAT)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'SINGLE-FLOAT) 'SINGLE-FLOAT)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'DOUBLE-FLOAT) 'DOUBLE-FLOAT)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'LONG-FLOAT) 'LONG-FLOAT)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'RATIONAL) 'RATIONAL)" Comment.Single
'\n'          Text.Whitespace

";;           ((subtypep type 'REAL) 'REAL)" Comment.Single
'\n'          Text.Whitespace

';;           (t (error ...))))' Comment.Single
'\n'          Text.Whitespace

';; The reason is that a complex number is immutable: no setters for the' Comment.Single
'\n'          Text.Whitespace

';; realpart and imagpart exist.' Comment.Single
'\n'          Text.Whitespace

';;'          Comment.Single
'\n'          Text.Whitespace

';; We choose the second implementation because it allows the most precise' Comment.Single
'\n'          Text.Whitespace

';; type inference.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'upgraded-complex-part-type' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'environment' Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'environment' Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'subtypep'    Name.Builtin
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
"'REAL"       Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'type'        Keyword
'\n    '      Text.Whitespace
'('           Punctuation
'error-of-type' Name.Variable
' '           Text.Whitespace
"'error"      Literal.String.Symbol
'\n      '    Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: type ~S is not a subtype of ~S"' Literal.String
')'           Punctuation
'\n      '    Text.Whitespace
"'upgraded-complex-part-type" Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
"'real"       Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';; ----------------------------------------------------------------------------' Comment.Single
'\n\n'        Text.Whitespace

';; Macros for defining the various built-in "atomic type specifier"s and' Comment.Single
'\n'          Text.Whitespace

';; "compound type specifier"s. The following macros add information for both' Comment.Single
'\n'          Text.Whitespace

';; the TYPEP function above and the c-TYPEP in the compiler.' Comment.Single
'\n\n'        Text.Whitespace

'; Alist symbol -> funname, used by the compiler.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defparameter' Name.Builtin
' '           Text.Whitespace
'c-typep-alist1' Name.Variable
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'; Alist symbol -> lambdabody, used by the compiler.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defparameter' Name.Builtin
' '           Text.Whitespace
'c-typep-alist2' Name.Variable
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'; Alist symbol -> expander function, used by the compiler.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defparameter' Name.Builtin
' '           Text.Whitespace
'c-typep-alist3' Name.Variable
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'; (def-atomic-type symbol function-name)' Comment.Single
'\n'          Text.Whitespace

'; defines an atomic type. The function-name designates a function taking one' Comment.Single
'\n'          Text.Whitespace

'; argument and returning a generalized boolean value. It can be either a' Comment.Single
'\n'          Text.Whitespace

'; symbol or a lambda expression.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defmacro'    Name.Builtin
' '           Text.Whitespace
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'symbol'      Name.Class
' '           Text.Whitespace
'funname'     Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'lambdap'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'funname'     Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'funname'     Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'LAMBDA"     Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'`'           Operator
'('           Punctuation
'PROGN'       Name.Variable
'\n       '   Text.Whitespace
'('           Punctuation
'SETF'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'GET'         Name.Variable
' '           Text.Whitespace
"',symbol"    Literal.String.Symbol
' '           Text.Whitespace
"'TYPE-SYMBOL" Literal.String.Symbol
')'           Punctuation
'\n             ' Text.Whitespace
','           Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'lambdap'     Name.Variable
'\n                ' Text.Whitespace
'`'           Operator
'('           Punctuation
'FUNCTION'    Name.Variable
' '           Text.Whitespace
','           Operator
'('           Punctuation
'concat-pnames' Name.Variable
' '           Text.Whitespace
'"TYPE-SYMBOL-"' Literal.String
' '           Text.Whitespace
'symbol'      Name.Class
')'           Punctuation
' '           Text.Whitespace
','           Operator
'funname'     Name.Variable
')'           Punctuation
'\n                ' Text.Whitespace
'`'           Operator
'('           Punctuation
'FUNCTION'    Name.Variable
' '           Text.Whitespace
','           Operator
'funname'     Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
','           Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'lambdap'     Name.Variable
'\n          ' Text.Whitespace
'`'           Operator
'('           Punctuation
'SETQ'        Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST2' Name.Variable
'\n                 ' Text.Whitespace
'('           Punctuation
'NCONC'       Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST2' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'LIST'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CONS'        Name.Variable
' '           Text.Whitespace
"',symbol"    Literal.String.Symbol
' '           Text.Whitespace
"',"          Literal.String.Symbol
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'funname'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
')'           Punctuation
'\n          ' Text.Whitespace
'`'           Operator
'('           Punctuation
'SETQ'        Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST1' Name.Variable
'\n                 ' Text.Whitespace
'('           Punctuation
'NCONC'       Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST1' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'LIST'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CONS'        Name.Variable
' '           Text.Whitespace
"',symbol"    Literal.String.Symbol
' '           Text.Whitespace
"',funname"   Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
"',symbol"    Literal.String.Symbol
'\n     '     Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n\n'        Text.Whitespace

'; (def-compound-type symbol lambda-list (x) check-form typep-form c-typep-form)' Comment.Single
'\n'          Text.Whitespace

'; defines a compound type. The lambda-list is of the form (&optional ...)' Comment.Single
'\n'          Text.Whitespace

'; where the arguments come from the CDR of the type specifier.' Comment.Single
'\n'          Text.Whitespace

'; For typep-form, x is an object.' Comment.Single
'\n'          Text.Whitespace

'; For c-typep-form, x is a multiply evaluatable form (actually a gensym).' Comment.Single
'\n'          Text.Whitespace

"; check-form is a form performing error checking, may call `error'." Comment.Single
'\n'          Text.Whitespace

'; typep-form should return a generalized boolean value.' Comment.Single
'\n'          Text.Whitespace

'; c-typep-form should produce a form returning a generalized boolean value.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defmacro'    Name.Builtin
' '           Text.Whitespace
'def-compound-type' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'symbol'      Name.Class
' '           Text.Whitespace
'lambdalist'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'var'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'check-form'  Name.Variable
' '           Text.Whitespace
'typep-form'  Name.Variable
' '           Text.Whitespace
'c-typep-form' Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'PROGN'       Name.Variable
'\n     '     Text.Whitespace
'('           Punctuation
'SETF'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'GET'         Name.Variable
' '           Text.Whitespace
"',symbol"    Literal.String.Symbol
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'FUNCTION'    Name.Variable
' '           Text.Whitespace
','           Operator
'('           Punctuation
'concat-pnames' Name.Variable
' '           Text.Whitespace
'"TYPE-LIST-"' Literal.String
' '           Text.Whitespace
'symbol'      Name.Class
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'LAMBDA'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
','           Operator
'var'         Name.Variable
' '           Text.Whitespace
',@'          Operator
'lambdalist'  Name.Variable
')'           Punctuation
'\n               ' Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'check-form'  Name.Variable
'\n                   ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'MACROLET'    Name.Variable
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'ERROR'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&REST'       Name.Variable
' '           Text.Whitespace
'ERROR-ARGS'  Name.Variable
')'           Punctuation
'\n                                  ' Text.Whitespace
'('           Punctuation
'LIST*'       Name.Variable
' '           Text.Whitespace
"'ERROR-OF-TYPE" Literal.String.Symbol
' '           Text.Whitespace
"'"           Operator
"'ERROR"      Literal.String.Symbol
' '           Text.Whitespace
'ERROR-ARGS'  Name.Variable
')'           Punctuation
'\n                               ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n                       ' Text.Whitespace
','           Operator
'check-form'  Name.Variable
'\n                    ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
')'           Punctuation
'\n               ' Text.Whitespace
','           Operator
'typep-form'  Name.Variable
'\n     '     Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n     '     Text.Whitespace
'('           Punctuation
'SETQ'        Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST3' Name.Variable
'\n           ' Text.Whitespace
'('           Punctuation
'NCONC'       Name.Variable
' '           Text.Whitespace
'C-TYPEP-ALIST3' Name.Variable
'\n                  ' Text.Whitespace
'('           Punctuation
'LIST'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CONS'        Name.Variable
' '           Text.Whitespace
"',symbol"    Literal.String.Symbol
'\n                              ' Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'LAMBDA'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
','           Operator
'var'         Name.Variable
' '           Text.Whitespace
',@'          Operator
'lambdalist'  Name.Variable
' '           Text.Whitespace
'&REST'       Name.Variable
' '           Text.Whitespace
'ILLEGAL-ARGS' Name.Variable
')'           Punctuation
'\n                                  ' Text.Whitespace
'('           Punctuation
'DECLARE'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
'IGNORE'      Name.Variable
' '           Text.Whitespace
'ILLEGAL-ARGS' Name.Variable
')'           Punctuation
')'           Punctuation
'\n                                  ' Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'check-form'  Name.Variable
'\n                                      ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'MACROLET'    Name.Variable
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'ERROR'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&REST'       Name.Variable
' '           Text.Whitespace
'ERROR-ARGS'  Name.Variable
')'           Punctuation
'\n                                                     ' Text.Whitespace
'('           Punctuation
'LIST'        Name.Variable
' '           Text.Whitespace
"'PROGN"      Literal.String.Symbol
'\n                                                           ' Text.Whitespace
'('           Punctuation
'LIST*'       Name.Variable
' '           Text.Whitespace
"'C-WARN"     Literal.String.Symbol
' '           Text.Whitespace
'ERROR-ARGS'  Name.Variable
')'           Punctuation
'\n                                                           ' Text.Whitespace
"'"           Operator
'('           Punctuation
'THROW'       Name.Variable
' '           Text.Whitespace
"'C-TYPEP"    Literal.String.Symbol
' '           Text.Whitespace
'NIL'         Name.Constant
')'           Punctuation
'\n                                                  ' Text.Whitespace
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n                                          ' Text.Whitespace
','           Operator
'check-form'  Name.Variable
'\n                                       ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n                                    ' Text.Whitespace
')'           Punctuation
'\n                                  ' Text.Whitespace
','           Operator
'c-typep-form' Name.Variable
'\n                                ' Text.Whitespace
')'           Punctuation
'\n     '     Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'      '      Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'\n     '     Text.Whitespace
"',symbol"    Literal.String.Symbol
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n\n'        Text.Whitespace

'; CLtL1 p. 43' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'arrayp'      Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ATOM'        Name.Variable
' '           Text.Whitespace
'atom'        Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BASE-CHAR'   Name.Variable
'\n  '        Text.Whitespace
'#+'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
'\n  '        Text.Whitespace
'characterp'  Name.Builtin
'\n  '        Text.Whitespace
'#-'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'characterp'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'base-char-p' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BASE-STRING' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'stringp'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'#+'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
' '           Text.Whitespace
'#-'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
' '           Text.Whitespace
"'BASE-CHAR"  Literal.String.Symbol
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BIGNUM'      Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'fixnump'     Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BIT'         Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BIT-VECTOR'  Name.Variable
' '           Text.Whitespace
'bit-vector-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BOOLEAN'     Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
"'nil"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
"'t"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'CHARACTER'   Name.Variable
' '           Text.Whitespace
'characterp'  Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'COMPILED-FUNCTION' Name.Variable
' '           Text.Whitespace
'compiled-function-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'COMPLEX'     Name.Variable
' '           Text.Whitespace
'complexp'    Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'CONS'        Name.Variable
' '           Text.Whitespace
'consp'       Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'DOUBLE-FLOAT' Name.Variable
' '           Text.Whitespace
'double-float-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ENCODING'    Name.Variable
' '           Text.Whitespace
'encodingp'   Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'EXTENDED-CHAR' Name.Variable
'\n  '        Text.Whitespace
'#+'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n  '        Text.Whitespace
'#-'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'characterp'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'base-char-p' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'FIXNUM'      Name.Variable
' '           Text.Whitespace
'fixnump'     Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'FLOAT'       Name.Variable
' '           Text.Whitespace
'floatp'      Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'FUNCTION'    Name.Variable
' '           Text.Whitespace
'functionp'   Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'HASH-TABLE'  Name.Variable
' '           Text.Whitespace
'hash-table-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'INTEGER'     Name.Variable
' '           Text.Whitespace
'integerp'    Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'KEYWORD'     Name.Variable
' '           Text.Whitespace
'keywordp'    Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'LIST'        Name.Variable
' '           Text.Whitespace
'listp'       Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'#+'          Operator
'LOGICAL-PATHNAMES' Name.Variable
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'LOGICAL-PATHNAME' Name.Variable
' '           Text.Whitespace
'logical-pathname-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'LONG-FLOAT'  Name.Variable
' '           Text.Whitespace
'long-float-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'NIL'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'NULL'        Name.Variable
' '           Text.Whitespace
'null'        Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'NUMBER'      Name.Variable
' '           Text.Whitespace
'numberp'     Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'PACKAGE'     Name.Variable
' '           Text.Whitespace
'packagep'    Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'PATHNAME'    Name.Variable
' '           Text.Whitespace
'pathnamep'   Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'RANDOM-STATE' Name.Variable
' '           Text.Whitespace
'random-state-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'RATIO'       Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'rationalp'   Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'RATIONAL'    Name.Variable
' '           Text.Whitespace
'rationalp'   Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'READTABLE'   Name.Variable
' '           Text.Whitespace
'readtablep'  Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'REAL'        Name.Variable
' '           Text.Whitespace
'realp'       Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SEQUENCE'    Name.Variable
' '           Text.Whitespace
'sequencep'   Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SHORT-FLOAT' Name.Variable
' '           Text.Whitespace
'short-float-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
' '           Text.Whitespace
'simple-array-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-BASE-STRING' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-string-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'#+'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
' '           Text.Whitespace
'#-'          Operator
'BASE-CHAR=CHARACTER' Name.Variable
' '           Text.Whitespace
"'BASE-CHAR"  Literal.String.Symbol
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-BIT-VECTOR' Name.Variable
' '           Text.Whitespace
'simple-bit-vector-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-STRING' Name.Variable
' '           Text.Whitespace
'simple-string-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-VECTOR' Name.Variable
' '           Text.Whitespace
'simple-vector-p' Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SINGLE-FLOAT' Name.Variable
' '           Text.Whitespace
'single-float-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'%standard-char-p' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'characterp'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'standard-char-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; ABI'       Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'STANDARD-CHAR' Name.Variable
' '           Text.Whitespace
'%standard-char-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'CLOS:STANDARD-OBJECT' Name.Variable
' '           Text.Whitespace
'clos::std-instance-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'STREAM'      Name.Variable
' '           Text.Whitespace
'streamp'     Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'FILE-STREAM' Name.Variable
' '           Text.Whitespace
'file-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SYNONYM-STREAM' Name.Variable
' '           Text.Whitespace
'synonym-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'BROADCAST-STREAM' Name.Variable
' '           Text.Whitespace
'broadcast-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'CONCATENATED-STREAM' Name.Variable
' '           Text.Whitespace
'concatenated-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'TWO-WAY-STREAM' Name.Variable
' '           Text.Whitespace
'two-way-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ECHO-STREAM' Name.Variable
' '           Text.Whitespace
'echo-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'STRING-STREAM' Name.Variable
' '           Text.Whitespace
'string-stream-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'STRING'      Name.Variable
' '           Text.Whitespace
'stringp'     Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'STRING-CHAR' Name.Variable
' '           Text.Whitespace
'characterp'  Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'CLOS:STRUCTURE-OBJECT' Name.Variable
' '           Text.Whitespace
'clos::structure-object-p' Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'SYMBOL'      Name.Variable
' '           Text.Whitespace
'symbolp'     Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'T'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

';; foreign1.lisp is loaded after this file,' Comment.Single
'\n'          Text.Whitespace

';; so these symbols are not external yet' Comment.Single
'\n'          Text.Whitespace

'#+'          Operator
'ffi'         Name.Variable
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ffi::foreign-function' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
"'ffi::foreign-function" Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'type-of'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'#+'          Operator
'ffi'         Name.Variable
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ffi::foreign-variable' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
"'ffi::foreign-variable" Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'type-of'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'#+'          Operator
'ffi'         Name.Variable
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'ffi::foreign-address' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
"'ffi::foreign-address" Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'type-of'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

';; see lispbibl.d (#define FOREIGN) and predtype.d (TYPE-OF):' Comment.Single
'\n'          Text.Whitespace

'#+'          Operator
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'unix'        Name.Variable
' '           Text.Whitespace
'ffi'         Name.Variable
' '           Text.Whitespace
'affi'        Name.Variable
' '           Text.Whitespace
'win32'       Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'foreign-pointer' Name.Variable
'\n  '        Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
"'foreign-pointer" Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'type-of'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'VECTOR'      Name.Variable
' '           Text.Whitespace
'vectorp'     Name.Builtin
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-atomic-type' Name.Variable
' '           Text.Whitespace
'PLIST'       Name.Variable
'\n    '      Text.Whitespace
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'multiple-value-bind' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'tail'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'list-length-dotted' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'tail'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'evenp'       Name.Builtin
' '           Text.Whitespace
'length'      Name.Builtin
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defmacro'    Name.Builtin
' '           Text.Whitespace
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'dim'         Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
';; make sure DIM is a valid dimension' Comment.Single
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
','           Operator
'dim'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
','           Operator
'dim'         Name.Variable
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'INTEGER'     Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'('           Punctuation
','           Operator
'ARRAY-DIMENSION-LIMIT' Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n     '     Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: dimension ~S is invalid"' Literal.String
')'           Punctuation
' '           Text.Whitespace
"',type"      Literal.String.Symbol
' '           Text.Whitespace
','           Operator
'dim'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defmacro'    Name.Builtin
' '           Text.Whitespace
'ensure-rank' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
' '           Text.Whitespace
'rank'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
';; make sure RANK is a valid rank' Comment.Single
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
','           Operator
'rank'        Name.Variable
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'INTEGER'     Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'('           Punctuation
','           Operator
'ARRAY-RANK-LIMIT' Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n     '     Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: rank ~S is invalid"' Literal.String
')'           Punctuation
' '           Text.Whitespace
"',type"      Literal.String.Symbol
' '           Text.Whitespace
','           Operator
'rank'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'; CLtL1 p. 46-50' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'c-typep-array' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'tester'      Name.Variable
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
','           Operator
'tester'      Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQUAL'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ARRAY-ELEMENT-TYPE' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',"          Literal.String.Symbol
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
','           Operator
'dims'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ARRAY-RANK'  Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
','           Operator
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'ARRAY-RANK'  Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
',@'          Operator
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'i'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'mapcap'      Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'dim'         Name.Variable
')'           Punctuation
'\n                                ' Text.Whitespace
'('           Punctuation
'prog1'       Name.Builtin
'\n                                  ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dim'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n                                    ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n                                    ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
"',dim"       Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'ARRAY-DIMENSION' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
' '           Text.Whitespace
','           Operator
'i'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                                  ' Text.Whitespace
')'           Punctuation
'\n                                  ' Text.Whitespace
'('           Punctuation
'incf'        Name.Builtin
' '           Text.Whitespace
'i'           Name.Variable
')'           Punctuation
'\n                              ' Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n                            ' Text.Whitespace
'dims'        Name.Variable
'\n                  ' Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n               ' Text.Whitespace
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'c-typep-vector' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'tester'      Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
','           Operator
'tester'      Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
"',size"      Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'ARRAY-DIMENSION' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'typep-number-test' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'error-of-type' Name.Variable
' '           Text.Whitespace
"'error"      Literal.String.Symbol
'\n                  ' Text.Whitespace
'#1='         Operator
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to ~S must be *, ~S or a list of ~S: ~S"' Literal.String
')'           Punctuation
'\n                  ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
'\n       '   Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'>='          Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'test'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'>'           Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'error-of-type' Name.Variable
' '           Text.Whitespace
"'error"      Literal.String.Symbol
'\n                  ' Text.Whitespace
'#1#'         Operator
' '           Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'high'        Name.Variable
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'c-typep-number' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'caller'      Name.Variable
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
','           Operator
'tester'      Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
','           Operator
'low'         Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
','           Operator
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'c-warn'      Name.Variable
' '           Text.Whitespace
'#1='         Operator
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to ~S must be *, ~S or a list of ~S: ~S"' Literal.String
')'           Punctuation
'\n                           ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
'\n                   ' Text.Whitespace
')'           Punctuation
'\n                   ' Text.Whitespace
'('           Punctuation
'throw'       Keyword
' '           Text.Whitespace
"'c-TYPEP"    Literal.String.Symbol
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'>='          Name.Builtin
' '           Text.Whitespace
','           Operator
'high'        Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'>'           Name.Builtin
' '           Text.Whitespace
','           Operator
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'c-warn'      Name.Variable
' '           Text.Whitespace
'#1#'         Operator
' '           Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'caller'      Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
'\n                   ' Text.Whitespace
'('           Punctuation
'throw'       Keyword
' '           Text.Whitespace
"'c-TYPEP"    Literal.String.Symbol
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'     '       Text.Whitespace
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'ensure-rank' Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'dim'         Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'dim'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'arrayp'      Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'equal'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-rank'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'array-rank'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'every'       Name.Builtin
' '           Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'a'           Name.Variable
' '           Text.Whitespace
'b'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'a'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'a'           Name.Variable
' '           Text.Whitespace
'b'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                         ' Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimensions' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'   '         Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-array' Name.Variable
' '           Text.Whitespace
"'ARRAYP"     Literal.String.Symbol
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'ensure-rank' Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'dim'         Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
' '           Text.Whitespace
'dim'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-array-p' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'equal'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-rank'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'dims'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'array-rank'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'every'       Name.Builtin
' '           Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'a'           Name.Variable
' '           Text.Whitespace
'b'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'a'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'a'           Name.Variable
' '           Text.Whitespace
'b'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                         ' Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimensions' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'   '         Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'    '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-array' Name.Variable
' '           Text.Whitespace
"'SIMPLE-ARRAY-P" Literal.String.Symbol
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
'dims'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'VECTOR'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'VECTOR'      Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'vectorp'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'equal'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'VECTORP'     Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQUAL'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ARRAY-ELEMENT-TYPE' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',"          Literal.String.Symbol
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ARRAY-DIMENSION' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
"',size"      Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-VECTOR' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'SIMLPE-VECTOR' Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-vector-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'SIMPLE-VECTOR-P" Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'COMPLEX'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'rtype'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'itype'       Name.Variable
' '           Text.Whitespace
'rtype'       Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'complexp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'rtype'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'realpart'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'upgraded-complex-part-type' Name.Builtin
' '           Text.Whitespace
'rtype'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'itype'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'imagpart'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'upgraded-complex-part-type' Name.Builtin
' '           Text.Whitespace
'itype'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'COMPLEXP'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'rtype'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'TYPEP'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'REALPART'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',"          Literal.String.Symbol
'('           Punctuation
'upgraded-complex-part-type' Name.Builtin
' '           Text.Whitespace
'rtype'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'itype'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n            ' Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'TYPEP'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'IMAGPART'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',"          Literal.String.Symbol
'('           Punctuation
'upgraded-complex-part-type' Name.Builtin
' '           Text.Whitespace
'itype'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'INTEGER'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'integerp'    Name.Builtin
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
' '           Text.Whitespace
"'INTEGERP"   Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'MOD'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'n'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to MOD must be an integer: ~S"' Literal.String
')'           Punctuation
'\n           ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'n'           Name.Variable
'\n  '        Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'INTEGERP'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'NOT'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'MINUSP'      Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
' '           Text.Whitespace
','           Operator
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to SIGNED-BYTE must be an integer or * : ~S"' Literal.String
')'           Punctuation
'\n           ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'n'           Name.Variable
'\n  '        Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integer-length' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'INTEGERP'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'<'           Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'INTEGER-LENGTH' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
','           Operator
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S: argument to UNSIGNED-BYTE must be an integer or * : ~S"' Literal.String
')'           Punctuation
'\n           ' Text.Whitespace
"'typep"      Literal.String.Symbol
' '           Text.Whitespace
'n'           Name.Variable
'\n  '        Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'minusp'      Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integer-length' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'INTEGERP'    Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'NOT'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'MINUSP'      Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'INTEGER-LENGTH' Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
','           Operator
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'REAL'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'realp'       Name.Builtin
' '           Text.Whitespace
"'REAL"       Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'REAL"       Literal.String.Symbol
' '           Text.Whitespace
"'REALP"      Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'RATIONAL'    Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'rationalp'   Name.Builtin
' '           Text.Whitespace
"'RATIONAL"   Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'RATIONAL"   Literal.String.Symbol
' '           Text.Whitespace
"'RATIONALP"  Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'FLOAT'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'floatp'      Name.Builtin
' '           Text.Whitespace
"'FLOAT"      Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'FLOAT"      Literal.String.Symbol
' '           Text.Whitespace
"'FLOATP"     Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SHORT-FLOAT' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'short-float-p' Name.Variable
' '           Text.Whitespace
"'SHORT-FLOAT" Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'SHORT-FLOAT" Literal.String.Symbol
' '           Text.Whitespace
"'SHORT-FLOAT-P" Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SINGLE-FLOAT' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'single-float-p' Name.Variable
' '           Text.Whitespace
"'SINGLE-FLOAT" Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'SINGLE-FLOAT" Literal.String.Symbol
' '           Text.Whitespace
"'SINGLE-FLOAT-P" Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'DOUBLE-FLOAT' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'double-float-p' Name.Variable
' '           Text.Whitespace
"'DOUBLE-FLOAT" Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'DOUBLE-FLOAT" Literal.String.Symbol
' '           Text.Whitespace
"'DOUBLE-FLOAT-P" Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'LONG-FLOAT'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'typep-number-test' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'long-float-p' Name.Variable
' '           Text.Whitespace
"'LONG-FLOAT" Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-number' Name.Variable
' '           Text.Whitespace
"'LONG-FLOAT" Literal.String.Symbol
' '           Text.Whitespace
"'LONG-FLOAT-P" Literal.String.Symbol
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'STRING'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'STRING'      Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'stringp'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'STRINGP"    Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-STRING' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'SIMPLE-STRING' Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-string-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'SIMPLE-STRING-P" Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'BASE-STRING' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'BASE-STRING' Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'stringp'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'STRINGP"    Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-BASE-STRING' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'SIMPLE-BASE-STRING' Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-string-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'SIMPLE-STRING-P" Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'BIT-VECTOR'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'BIT-VECTOR'  Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'bit-vector-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'BIT-VECTOR-P" Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'SIMPLE-BIT-VECTOR' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'ensure-dim'  Name.Variable
' '           Text.Whitespace
'SIMPLE-BIT-VECTOR' Name.Variable
' '           Text.Whitespace
'size'        Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'simple-bit-vector-p' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-dimension' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'c-typep-vector' Name.Variable
' '           Text.Whitespace
"'SIMPLE-BIT-VECTOR-P" Literal.String.Symbol
' '           Text.Whitespace
'size'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'def-compound-type' Name.Variable
' '           Text.Whitespace
'CONS'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'car-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'cdr-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'nil'         Name.Constant
'\n  '        Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'car-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'car-type'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'cdr-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'cdr-type'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
')'           Punctuation
'\n  '        Text.Whitespace
'`'           Operator
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CONSP'       Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'car-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'TYPEP'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CAR'         Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',car-type"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
',@'          Operator
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'cdr-type'    Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'('           Punctuation
'TYPEP'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'CDR'         Name.Variable
' '           Text.Whitespace
','           Operator
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"',cdr-type"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n   '       Text.Whitespace
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'fmakunbound' Name.Builtin
' '           Text.Whitespace
"'def-compound-type" Literal.String.Symbol
')'           Punctuation
'\n\n'        Text.Whitespace

';; ----------------------------------------------------------------------------' Comment.Single
'\n\n'        Text.Whitespace

'; Typtest ohne Gefahr einer Fehlermeldung. Für SIGNAL und HANDLER-BIND.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'safe-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'env'         Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'*error-handler*' Name.Variable.Global
'\n          ' Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'&rest'       Keyword
' '           Text.Whitespace
'error-args'  Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'declare'     Keyword
' '           Text.Whitespace
'('           Punctuation
'ignore'      Keyword
' '           Text.Whitespace
'error-args'  Name.Variable
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'safe-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'nil'         Name.Constant
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
')'           Punctuation
')'           Punctuation
'   '         Text.Whitespace
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'env'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n\n'        Text.Whitespace

'; Umwandlung eines "type for declaration" in einen "type for discrimination".' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'type-for-discrimination' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'y'           Name.Variable
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'('           Punctuation
'notp'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
' '           Text.Whitespace
'&aux'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'TYPE-SYMBOL" Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
"'DEFTYPE-EXPANDER" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'let*'        Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'z'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'list'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                         ' Text.Whitespace
'('           Punctuation
'zx'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type-for-discrimination' Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
' '           Text.Whitespace
'notp'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'zx'          Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'zx'          Name.Variable
')'           Punctuation
'\n                 ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'SATISFIES'   Name.Variable
' '           Text.Whitespace
'MEMBER'      Name.Variable
' '           Text.Whitespace
'EQL'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'NOT'         Name.Variable
'\n              ' Text.Whitespace
'('           Punctuation
'let*'        Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'z'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'zx'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type-for-discrimination' Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'notp'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'zx'          Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'`'           Operator
'('           Punctuation
'NOT'         Name.Variable
' '           Text.Whitespace
','           Operator
'zx'          Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'OR'          Name.Variable
' '           Text.Whitespace
'COMPLEX'     Name.Variable
' '           Text.Whitespace
'VALUES'      Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'let*'        Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'z'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                     ' Text.Whitespace
'('           Punctuation
'zx'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'mapcar'      Name.Builtin
' '           Text.Whitespace
"#'"          Name.Function
'('           Punctuation
'lambda'      Keyword
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'type-for-discrimination' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'notp'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'z'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'every'       Name.Builtin
' '           Text.Whitespace
"#'"          Name.Function
'eql'         Name.Builtin
' '           Text.Whitespace
'z'           Name.Variable
' '           Text.Whitespace
'zx'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cons'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'zx'          Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'FUNCTION'    Name.Variable
'\n              ' Text.Whitespace
';; (FUNCTION arg-types res-type) is somewhere between' Comment.Single
'\n              ' Text.Whitespace
';; NIL and FUNCTION, but undecidable.' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'notp'        Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
' '           Text.Whitespace
"'FUNCTION"   Literal.String.Symbol
')'           Punctuation
'\n             ' Text.Whitespace
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'DEFTYPE-EXPANDER" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                       ' Text.Whitespace
'('           Punctuation
'let*'        Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'z'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'funcall'     Name.Builtin
' '           Text.Whitespace
'f'           Name.Variable
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                              ' Text.Whitespace
'('           Punctuation
'zx'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type-for-discrimination' Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
' '           Text.Whitespace
'notp'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                         ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'zx'          Name.Variable
' '           Text.Whitespace
'z'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'y'           Name.Variable
' '           Text.Whitespace
'zx'          Name.Variable
')'           Punctuation
'\n                      ' Text.Whitespace
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'  '          Text.Whitespace
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'y'           Name.Variable
')'           Punctuation
'\n'          Text.Whitespace

')'           Punctuation
' '           Text.Whitespace
')'           Punctuation
'\n\n'        Text.Whitespace

'; Testet eine Liste von Werten auf Erfüllen eines Type-Specifiers. Für THE.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'; ABI'       Comment.Single
'\n  '        Text.Whitespace
'('           Punctuation
'macrolet'    Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'objform'     Name.Variable
' '           Text.Whitespace
'typform'     Name.Variable
')'           Punctuation
'\n               ' Text.Whitespace
';; near-typep ist wie typep, nur dass das Objekt auch ein' Comment.Single
'\n               ' Text.Whitespace
';; Read-Label sein darf. Das tritt z.B. auf bei' Comment.Single
'\n               ' Text.Whitespace
';; (read-from-string "#1=#S(FOO :X #1#)")' Comment.Single
'\n               ' Text.Whitespace
';; im Konstruktor MAKE-FOO. Die Implementation ist aber' Comment.Single
'\n               ' Text.Whitespace
';; nicht gezwungen, bei fehlerhaftem THE zwingend einen' Comment.Single
'\n               ' Text.Whitespace
';; Fehler zu melden, darum ist ein lascherer Typcheck hier' Comment.Single
'\n               ' Text.Whitespace
';; erlaubt.' Comment.Single
'\n               ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'g'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'gensym'      Name.Builtin
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'`'           Operator
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
','           Operator
'g'           Name.Variable
' '           Text.Whitespace
','           Operator
'objform'     Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
','           Operator
'g'           Name.Variable
' '           Text.Whitespace
','           Operator
'typform'     Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type-of'     Name.Builtin
' '           Text.Whitespace
','           Operator
'g'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'READ-LABEL" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'VALUES"     Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n      '    Text.Whitespace
';; The VALUES type specifier is ill-defined in ANSI CL.' Comment.Single
'\n      '    Text.Whitespace
';;'          Comment.Single
'\n      '    Text.Whitespace
';; There are two possibilities to define a VALUES type specifier in a' Comment.Single
'\n      '    Text.Whitespace
';; sane way:' Comment.Single
'\n      '    Text.Whitespace
';; - (EXACT-VALUES type1 ... [&optional ...]) describes the exact shape' Comment.Single
'\n      '    Text.Whitespace
';;   of the values list, as received by MULTIPLE-VALUE-LIST.' Comment.Single
'\n      '    Text.Whitespace
";;   For example, (EXACT-VALUES SYMBOL) is matched by (values 'a) but not" Comment.Single
'\n      '    Text.Whitespace
";;   by (values 'a 'b) or (values)." Comment.Single
'\n      '    Text.Whitespace
';; - (ASSIGNABLE-VALUES type1 ... [&optional ...]) describes the values' Comment.Single
'\n      '    Text.Whitespace
';;   as received by a set of variables through MULTIPLE-VALUE-BIND or' Comment.Single
'\n      '    Text.Whitespace
';;   MULTIPLE-VALUE-SETQ. For example, (ASSIGNABLE-VALUES SYMBOL) is' Comment.Single
'\n      '    Text.Whitespace
';;   defined by whether' Comment.Single
'\n      '    Text.Whitespace
';;     (MULTIPLE-VALUE-BIND (var1) values (DECLARE (TYPE SYMBOL var1)) ...)' Comment.Single
'\n      '    Text.Whitespace
';;   is valid or not; therefore (ASSIGNABLE-VALUES SYMBOL) is matched by' Comment.Single
'\n      '    Text.Whitespace
";;   (values 'a) and (values 'a 'b) and (values)." Comment.Single
'\n      '    Text.Whitespace
';;   Note that &OPTIONAL is actually redundant here:' Comment.Single
'\n      '    Text.Whitespace
';;     (ASSIGNABLE-VALUES type1 ... &optional otype1 ...)' Comment.Single
'\n      '    Text.Whitespace
';;   is equivalent to' Comment.Single
'\n      '    Text.Whitespace
';;     (ASSIGNABLE-VALUES type1 ... (OR NULL otype1) ...)' Comment.Single
'\n      '    Text.Whitespace
';; HyperSpec/Body/typspe_values.html indicates that VALUES means' Comment.Single
'\n      '    Text.Whitespace
';; EXACT-VALUES; however, HyperSpec/Body/speope_the.html indicates that' Comment.Single
'\n      '    Text.Whitespace
';; VALUES means ASSIGNABLE-VALUES.' Comment.Single
'\n      '    Text.Whitespace
';;'          Comment.Single
'\n      '    Text.Whitespace
';; SBCL interprets the VALUES type specifier to mean EXACT-VALUES when' Comment.Single
'\n      '    Text.Whitespace
';; it contains &OPTIONAL or &REST, but ASSIGNABLE-VALUES when it has' Comment.Single
'\n      '    Text.Whitespace
';; only a tuple of type specifiers. This is utter nonsense, in particular' Comment.Single
'\n      '    Text.Whitespace
';; because it makes (VALUES type1 ... typek &OPTIONAL)' Comment.Single
'\n      '    Text.Whitespace
';; different from   (VALUES type1 ... typek).' Comment.Single
'\n      '    Text.Whitespace
';;'          Comment.Single
'\n      '    Text.Whitespace
';; Here we use the ASSIGNABLE-VALUES interpretation.' Comment.Single
'\n      '    Text.Whitespace
";; In SUBTYPEP we just punt and don't assume any interpretation." Comment.Single
'\n      '    Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'vals'        Name.Variable
' '           Text.Whitespace
'values'      Name.Builtin
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'types'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
';; required:' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'loop'        Name.Builtin
'\n          ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'memq'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'lambda-list-keywords' Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
';; &optional:' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'&optional"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'types'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'loop'        Name.Builtin
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'memq'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'lambda-list-keywords' Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
';; &rest &key:' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'&rest'       Keyword
'\n           ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'types'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'the"        Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'&key'        Keyword
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'the"        Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'&key"       Literal.String.Symbol
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'progn'       Keyword
'\n            ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'types'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'oddp'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'keywords'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'loop'        Name.Builtin
'\n                ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
't'           Name.Constant
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'memq'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'lambda-list-keywords' Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'item'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'pop'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'listp'       Name.Builtin
' '           Text.Whitespace
'item'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'item'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
'\n                               ' Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'item'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'the"        Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'kw'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
'symbol-to-keyword' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'item'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'getf'        Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
' '           Text.Whitespace
'kw'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'item'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'push'        Name.Builtin
' '           Text.Whitespace
'kw'          Name.Variable
' '           Text.Whitespace
'keywords'    Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'&allow-other-keys" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'types'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'getf'        Name.Builtin
' '           Text.Whitespace
'vals'        Name.Variable
' '           Text.Whitespace
"'"           Operator
':allow-other-keys' Literal.String.Symbol
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'do'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'L'           Name.Variable
' '           Text.Whitespace
'vals'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'cddr'        Name.Builtin
' '           Text.Whitespace
'L'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'atom'        Name.Builtin
' '           Text.Whitespace
'L'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'memq'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'L'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'keywords'    Name.Variable
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'%the'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'types'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'the"        Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
't'           Name.Constant
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'near-typep'  Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'values'      Name.Builtin
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'values'      Name.Builtin
')'           Punctuation
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';;; ===========================================================================' Comment.Single
'\n\n'        Text.Whitespace

';; SUBTYPEP' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'load'        Name.Builtin
' '           Text.Whitespace
'"subtypep"'  Literal.String
')'           Punctuation
'\n\n\n'      Text.Whitespace

';; Returns the number of bytes that are needed to represent #\\Null in a' Comment.Single
'\n'          Text.Whitespace

';; given encoding.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'encoding-zeroes' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'encoding'    Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'#+'          Operator
'UNICODE'     Name.Variable
'\n  '        Text.Whitespace
';; this should use min_bytes_per_char for cache, not the hash table' Comment.Single
'\n  '        Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'name'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ext:encoding-charset' Name.Variable
' '           Text.Whitespace
'encoding'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'table'       Name.Variable
' '           Text.Whitespace
'#.'          Operator
'('           Punctuation
'make-hash-table' Name.Builtin
' '           Text.Whitespace
':key-type'   Literal.String.Symbol
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'string'      Name.Builtin
' '           Text.Whitespace
'symbol'      Name.Class
')'           Punctuation
' '           Text.Whitespace
':value-type' Literal.String.Symbol
' '           Text.Whitespace
"'fixnum"     Literal.String.Symbol
'\n                                  ' Text.Whitespace
':test'       Literal.String.Symbol
' '           Text.Whitespace
"'stablehash-equal" Literal.String.Symbol
' '           Text.Whitespace
':warn-if-needs-rehash-after-gc' Literal.String.Symbol
' '           Text.Whitespace
't'           Name.Constant
'\n                                  ' Text.Whitespace
':initial-contents' Literal.String.Symbol
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'('           Punctuation
'"UTF-7"'     Literal.String
' '           Text.Whitespace
'.'           Operator
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'tester'      Name.Variable
' '           Text.Whitespace
'#.'          Operator
'('           Punctuation
'make-string' Name.Builtin
' '           Text.Whitespace
'2'           Literal.Number.Integer
' '           Text.Whitespace
':initial-element' Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'code-char'   Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'gethash'     Name.Builtin
' '           Text.Whitespace
'name'        Name.Variable
' '           Text.Whitespace
'table'       Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'setf'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'gethash'     Name.Builtin
' '           Text.Whitespace
'name'        Name.Variable
' '           Text.Whitespace
'table'       Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'-'           Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'ext:convert-string-to-bytes' Name.Variable
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'encoding'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'ext:convert-string-to-bytes' Name.Variable
' '           Text.Whitespace
'tester'      Name.Variable
' '           Text.Whitespace
'encoding'    Name.Variable
'\n                                                      ' Text.Whitespace
':end'        Literal.String.Symbol
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'#-'          Operator
'UNICODE'     Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
'\n\n'        Text.Whitespace

';; Determines two values low,high such that' Comment.Single
'\n'          Text.Whitespace

';;   (subtypep type `(INTEGER ,low ,high))' Comment.Single
'\n'          Text.Whitespace

';; holds and low is as large as possible and high is as small as possible.' Comment.Single
'\n'          Text.Whitespace

';; low = * means -infinity, high = * means infinity.' Comment.Single
'\n'          Text.Whitespace

";; When (subtypep type 'INTEGER) is false, the values NIL,NIL are returned." Comment.Single
'\n'          Text.Whitespace

';; We need this function only for MAKE-ARRAY, UPGRADED-ARRAY-ELEMENT-TYPE and' Comment.Single
'\n'          Text.Whitespace

';; OPEN and can therefore w.l.o.g. replace' Comment.Single
'\n'          Text.Whitespace

';;   type  with  `(OR ,type (MEMBER 0))' Comment.Single
'\n'          Text.Whitespace

'#|'          Comment.Multiline
" ;; The original implementation calls canonicalize-type and then applies\n   ;; a particular SUBTYPE variant:\n (defun subtype-integer (type)\n  (macrolet ((yes () '(return-from subtype-integer (values low high)))\n             (no () '(return-from subtype-integer nil))\n             (unknown () '(return-from subtype-integer nil)))\n    (setq type (canonicalize-type type))\n    (if (consp type)\n      (case (first type)\n        (MEMBER ; (MEMBER &rest objects)\n          ;; All elements must be of type INTEGER.\n          (let ((low 0) (high 0)) ; wlog!\n            (dolist (x (rest type) (yes))\n              (unless (typep x 'INTEGER) (return (no)))\n              (setq low (min low x) high (max high x)))))\n        (OR ; (OR type*)\n          ;; Every type must be subtype of INTEGER.\n          (let ((low 0) (high 0)) ; wlog!\n            (dolist (type1 (rest type) (yes))\n              (multiple-value-bind (low1 high1) (subtype-integer type1)\n                (unless low1 (return (no)))\n                (setq low (if (or (eq low '*) (eq low1 '*)) '* (min low low1))\n                      high (if (or (eq high '*) (eq high1 '*))\n                               '* (max high high1)))))))\n        (AND ; (AND type*)\n          ;; If one of the types is subtype of INTEGER, then yes,\n          ;; otherwise unknown.\n          (let ((low nil) (high nil))\n            (dolist (type1 (rest type))\n              (multiple-value-bind (low1 high1) (subtype-integer type1)\n                (when low1\n                  (if low\n                    (setq low (if (eq low '*) low1 (if (eq low1 '*) low (max low low1)))\n                          high (if (eq high '*) high1 (if (eq high1 '*) high (min high high1))))\n                    (setq low low1 high high1)))))\n            (if low\n              (progn\n                (when (and (numberp low) (numberp high) (not (<= low high)))\n                  (setq low 0 high 0) ; type equivalent to NIL)\n                (yes))\n              (unknown)))))\n      (setq type (list type)))\n    (if (eq (first type) 'INTEGER)\n      (let ((low (if (rest type) (second type) '*))\n            (high (if (cddr type) (third type) '*)))\n        (when (consp low)\n          (setq low (first low))\n          (when (numberp low) (incf low)))\n        (when (consp high)\n          (setq high (first high))\n          (when (numberp high) (decf high)))\n        (when (and (numberp low) (numberp high) (not (<= low high))) ; type leer?\n          (setq low 0 high 0))\n        (yes))\n      (if (and (eq (first type) 'INTERVALS) (eq (second type) 'INTEGER))\n        (let ((low (third type))\n              (high (car (last type))))\n          (when (consp low)\n            (setq low (first low))\n            (when (numberp low) (incf low)))\n          (when (consp high)\n            (setq high (first high))\n            (when (numberp high) (decf high)))\n          (yes))\n        (unknown)))))\n" Comment.Multiline

'|#'          Comment.Multiline
' '           Text.Whitespace
';; This implementation inlines the (tail-recursive) canonicalize-type' Comment.Single
'\n   '       Text.Whitespace
";; function. Its advantage is that it doesn't cons as much." Comment.Single
'\n   '       Text.Whitespace
";; (For example, (subtype-integer '(UNSIGNED-BYTE 8)) doesn't cons.)" Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'subtype-integer' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'macrolet'    Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'yes'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'subtype-integer' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'no'          Name.Variable
' '           Text.Whitespace
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'subtype-integer' Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'unknown'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'"           Operator
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'subtype-integer' Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'('           Punctuation
'expand-deftype' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
'\n             ' Text.Whitespace
'('           Punctuation
'BIT'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'FIXNUM'      Name.Variable
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'"           Operator
'#,'          Operator
'most-negative-fixnum' Name.Variable
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'"           Operator
'#,'          Operator
'most-positive-fixnum' Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'INTEGER'     Name.Variable
' '           Text.Whitespace
'BIGNUM'      Name.Variable
' '           Text.Whitespace
'SIGNED-BYTE' Name.Variable
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'NIL'         Name.Constant
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; wlog!'     Comment.Single
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'list-length' Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'last'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'MEMBER'      Name.Variable
' '           Text.Whitespace
'; (MEMBER &rest objects)' Comment.Single
'\n              ' Text.Whitespace
';; All elements must be of type INTEGER.' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; wlog!'     Comment.Single
'\n                ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
'; (EQL object)' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'OR'          Name.Variable
' '           Text.Whitespace
'; (OR type*)' Comment.Single
'\n              ' Text.Whitespace
';; Every type must be subtype of INTEGER.' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; wlog!'     Comment.Single
'\n                ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type1'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'multiple-value-bind' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'low1'        Name.Variable
' '           Text.Whitespace
'high1'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'subtype-integer' Name.Variable
' '           Text.Whitespace
'type1'       Name.Variable
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'low1'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'return'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low1'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                                  ' Text.Whitespace
"'*"          Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'low1'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n                          ' Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high1'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                                   ' Text.Whitespace
"'*"          Literal.String.Symbol
' '           Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'high1'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'; (AND type*)' Comment.Single
'\n              ' Text.Whitespace
';; If one of the types is subtype of INTEGER, then yes,' Comment.Single
'\n              ' Text.Whitespace
';; otherwise unknown.' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'type1'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'multiple-value-bind' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'low1'        Name.Variable
' '           Text.Whitespace
'high1'       Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'subtype-integer' Name.Variable
' '           Text.Whitespace
'type1'       Name.Variable
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'low1'        Name.Variable
'\n                      ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'low'         Name.Variable
'\n                        ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'low1'        Name.Variable
'\n                                      ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'low1'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'low'         Name.Variable
'\n                                          ' Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'low1'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                              ' Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'high1'       Name.Variable
'\n                                       ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'high1'       Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'high'        Name.Variable
'\n                                           ' Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'high1'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'low1'        Name.Variable
'\n                              ' Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'high1'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'low'         Name.Variable
'\n                  ' Text.Whitespace
'('           Punctuation
'progn'       Keyword
'\n                    ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
'\n                               ' Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; type equivalent to NIL' Comment.Single
'\n                    ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'unknown'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'INTEGER'     Name.Variable
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'cddr'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'third'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'incf'        Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'decf'        Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'<='          Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; type equivalent to NIL' Comment.Single
'\n                ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'INTERVALS'   Name.Variable
'\n              ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'third'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'car'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'last'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'incf'        Name.Builtin
' '           Text.Whitespace
'low'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'numberp'     Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'decf'        Name.Builtin
' '           Text.Whitespace
'high'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'unknown'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'MOD'         Name.Variable
' '           Text.Whitespace
'; (MOD n)'   Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'>='          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'1-'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'SIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'; (SIGNED-BYTE &optional s)' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
's'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'progn'       Keyword
'\n                    ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'plusp'       Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ash'         Name.Builtin
' '           Text.Whitespace
'1'           Literal.Number.Integer
' '           Text.Whitespace
'('           Punctuation
'1-'          Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; (ash 1 *) == (expt 2 *)' Comment.Single
'\n                      ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'-'           Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'1-'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'UNSIGNED-BYTE' Name.Variable
' '           Text.Whitespace
'; (UNSIGNED-BYTE &optional s)' Comment.Single
'\n              ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
's'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'progn'       Keyword
'\n                      ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'integerp'    Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'>='          Name.Builtin
' '           Text.Whitespace
's'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                      ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'ash'         Name.Builtin
' '           Text.Whitespace
'1'           Literal.Number.Integer
' '           Text.Whitespace
's'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'; (ash 1 *) == (expt 2 *)' Comment.Single
'\n                        ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'1-'          Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                          ' Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::defined-class-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos::built-in-class-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos:class-name' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'CLOS::CLOSCLASS" Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'return-from' Keyword
' '           Text.Whitespace
'subtype-integer' Name.Variable
'\n               ' Text.Whitespace
'('           Punctuation
'subtype-integer' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos:class-name' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::eql-specializer-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos::eql-specializer-singleton' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'typep'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
"'INTEGER"    Literal.String.Symbol
')'           Punctuation
'\n               ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'low'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'high'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
'0'           Literal.Number.Integer
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yes'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n               ' Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'encodingp'   Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'no'          Name.Variable
')'           Punctuation
')'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'#|'          Comment.Multiline
" TODO: Fix subtype-integer such that this works.\nHenry Baker:\n (defun type-null (x)\n  (values (and (eq 'bit (upgraded-array-element-type `(or bit ,x)))\n               (not (typep 0 x))\n               (not (typep 1 x)))\n          t))\n (type-null '(and symbol number))\n (type-null '(and integer symbol))\n (type-null '(and integer character))\n" Comment.Multiline

'|#'          Comment.Multiline
'\n\n'        Text.Whitespace

';; Determines a sequence kind (an atom, as defined in defseq.lisp: one of' Comment.Single
'\n'          Text.Whitespace

';;   LIST - stands for LIST' Comment.Single
'\n'          Text.Whitespace

';;   VECTOR - stands for (VECTOR T)' Comment.Single
'\n'          Text.Whitespace

';;   STRING - stands for (VECTOR CHARACTER)' Comment.Single
'\n'          Text.Whitespace

';;   1, 2, 4, 8, 16, 32 - stands for (VECTOR (UNSIGNED-BYTE n))' Comment.Single
'\n'          Text.Whitespace

';;   0 - stands for (VECTOR NIL))' Comment.Single
'\n'          Text.Whitespace

';; that indicates the sequence type meant by the given type. Other possible' Comment.Single
'\n'          Text.Whitespace

';; return values are' Comment.Single
'\n'          Text.Whitespace

';;   SEQUENCE - denoting a type whose intersection with (OR LIST VECTOR) is not' Comment.Single
'\n'          Text.Whitespace

';;              subtype of LIST or VECTOR, or' Comment.Single
'\n'          Text.Whitespace

';;   NIL - indicating a type whose intersection with (OR LIST VECTOR) is empty.' Comment.Single
'\n'          Text.Whitespace

';; When the type is (OR (VECTOR eltype1) ... (VECTOR eltypeN)), the chosen' Comment.Single
'\n'          Text.Whitespace

';; element type is the smallest element type that contains all of eltype1 ...' Comment.Single
'\n'          Text.Whitespace

';; eltypeN.' Comment.Single
'\n'          Text.Whitespace

';;'          Comment.Single
'\n'          Text.Whitespace

';; User-defined sequence types are not supported here.' Comment.Single
'\n'          Text.Whitespace

';;'          Comment.Single
'\n'          Text.Whitespace

';; This implementation inlines the (tail-recursive) canonicalize-type' Comment.Single
'\n'          Text.Whitespace

";; function. Its advantage is that it doesn't cons as much. Also it employs" Comment.Single
'\n'          Text.Whitespace

';; some heuristics and does not have the full power of SUBTYPEP.' Comment.Single
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'subtype-sequence' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type'        Keyword
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'type'        Keyword
' '           Text.Whitespace
'('           Punctuation
'expand-deftype' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'LIST'        Name.Variable
' '           Text.Whitespace
'CONS'        Name.Variable
' '           Text.Whitespace
'NULL'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'NIL'         Name.Constant
')'           Punctuation
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'BIT-VECTOR'  Name.Variable
' '           Text.Whitespace
'SIMPLE-BIT-VECTOR' Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'1"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'STRING'      Name.Variable
' '           Text.Whitespace
'SIMPLE-STRING' Name.Variable
' '           Text.Whitespace
'BASE-STRING' Name.Variable
' '           Text.Whitespace
'SIMPLE-BASE-STRING' Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'VECTOR'      Name.Variable
' '           Text.Whitespace
'SIMPLE-VECTOR' Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'SEQUENCE'    Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'list-length' Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'null'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'last'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'MEMBER'      Name.Variable
' '           Text.Whitespace
'; (MEMBER &rest objects)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'kind'        Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'sequence-type-union' Name.Variable
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'type-of-sequence' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'kind'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'EQL'         Name.Variable
' '           Text.Whitespace
'; (EQL object)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'length'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'type-of-sequence' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'OR'          Name.Variable
' '           Text.Whitespace
'; (OR type*)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'kind'        Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'sequence-type-union' Name.Variable
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'subtype-sequence' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'kind'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'AND'         Name.Variable
' '           Text.Whitespace
'; (AND type*)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'kind'        Name.Variable
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'dolist'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'rest'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n                ' Text.Whitespace
'('           Punctuation
'setq'        Keyword
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'sequence-type-intersection' Name.Variable
' '           Text.Whitespace
'kind'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'subtype-sequence' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'kind'        Name.Variable
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'SIMPLE-BIT-VECTOR' Name.Variable
' '           Text.Whitespace
'BIT-VECTOR'  Name.Variable
')'           Punctuation
' '           Text.Whitespace
'; (SIMPLE-BIT-VECTOR &optional size)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cddr'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
"'1"          Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'SIMPLE-STRING' Name.Variable
' '           Text.Whitespace
'STRING'      Name.Variable
' '           Text.Whitespace
'SIMPLE-BASE-STRING' Name.Variable
' '           Text.Whitespace
'BASE-STRING' Name.Variable
')'           Punctuation
' '           Text.Whitespace
'; (SIMPLE-STRING &optional size)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cddr'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'SIMPLE-VECTOR' Name.Variable
' '           Text.Whitespace
'; (SIMPLE-VECTOR &optional size)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cddr'        Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'VECTOR'      Name.Variable
' '           Text.Whitespace
'ARRAY'       Name.Variable
' '           Text.Whitespace
'SIMPLE-ARRAY' Name.Variable
')'           Punctuation
' '           Text.Whitespace
'; (VECTOR &optional el-type size), (ARRAY &optional el-type dimensions)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cdddr'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'el-type'     Name.Variable
' '           Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'cdr'         Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
' '           Text.Whitespace
"'*"          Literal.String.Symbol
')'           Punctuation
'\n                ' Text.Whitespace
"'VECTOR"     Literal.String.Symbol
'\n                ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eltype'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'upgraded-array-element-type' Name.Builtin
' '           Text.Whitespace
'el-type'     Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'T"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'BIT"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'1"          Literal.String.Symbol
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'UNSIGNED-BYTE" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'0"          Literal.String.Symbol
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S is not up-to-date with ~S for element type ~S"' Literal.String
')'           Punctuation
'\n                                  ' Text.Whitespace
"'subtypep-sequence" Literal.String.Symbol
' '           Text.Whitespace
"'upgraded-array-element-type" Literal.String.Symbol
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'CONS'        Name.Variable
')'           Punctuation
' '           Text.Whitespace
'; (CONS &optional cartype cdrtype)' Comment.Single
'\n            ' Text.Whitespace
'('           Punctuation
'when'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'cdddr'       Name.Builtin
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n              ' Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'subtypep"   Literal.String.Symbol
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::defined-class-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos::built-in-class-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n                  ' Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos:class-name' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
' '           Text.Whitespace
"'CLOS::CLOSCLASS" Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'subtype-sequence' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos:class-name' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::eql-specializer-p' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'type-of-sequence' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'clos::eql-specializer-singleton' Name.Variable
' '           Text.Whitespace
'type'        Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'type-of-sequence' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'listp'       Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'vectorp'     Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'let'         Keyword
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eltype'      Name.Variable
' '           Text.Whitespace
'('           Punctuation
'array-element-type' Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'T"          Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'CHARACTER"  Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'BIT"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'1"          Literal.String.Symbol
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'UNSIGNED-BYTE" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'second'      Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
'eltype'      Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
"'0"          Literal.String.Symbol
')'           Punctuation
'\n                 ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'error'       Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'TEXT'        Name.Variable
' '           Text.Whitespace
'"~S is not up-to-date with ~S for element type ~S"' Literal.String
')'           Punctuation
'\n                           ' Text.Whitespace
"'type-of-sequence" Literal.String.Symbol
' '           Text.Whitespace
"'array-element-type" Literal.String.Symbol
' '           Text.Whitespace
'eltype'      Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'sequence-type-union' Name.Variable
' '           Text.Whitespace
'('           Punctuation
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'; Simple general rules.' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'; Now the union of two different types.' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'; union of LIST and a vector type' Comment.Single
'\n         ' Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'; union of STRING and an integer-vector type' Comment.Single
'\n         ' Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'max'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'sequence-type-intersection' Name.Variable
' '           Text.Whitespace
'('           Punctuation
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'; Simple general rules.' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'; Now the intersection of two different types.' Comment.Single
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'SEQUENCE"   Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'LIST"       Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'; intersection of LIST and a vector type' Comment.Single
'\n         ' Text.Whitespace
"'NIL"        Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'VECTOR"     Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
't1'          Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eql'         Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
' '           Text.Whitespace
"'0"          Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'eq'          Name.Builtin
' '           Text.Whitespace
't2'          Name.Variable
' '           Text.Whitespace
"'STRING"     Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'; intersection of STRING and an integer-vector type' Comment.Single
'\n         ' Text.Whitespace
"'0"          Literal.String.Symbol
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'min'         Name.Builtin
' '           Text.Whitespace
't1'          Name.Variable
' '           Text.Whitespace
't2'          Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';; ============================================================================' Comment.Single
'\n\n'        Text.Whitespace

'('           Punctuation
'defun'       Name.Builtin
' '           Text.Whitespace
'type-expand' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'typespec'    Name.Variable
' '           Text.Whitespace
'&optional'   Keyword
' '           Text.Whitespace
'once-p'      Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'multiple-value-bind' Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'expanded'    Name.Variable
' '           Text.Whitespace
'user-defined-p' Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'expand-deftype' Name.Variable
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'once-p'      Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'user-defined-p' Name.Variable
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'expanded'    Name.Variable
' '           Text.Whitespace
'user-defined-p' Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
"'TYPE-SYMBOL" Literal.String.Symbol
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n                   ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'or'          Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
"'DEFSTRUCT-DESCRIPTION" Literal.String.Symbol
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
'clos-class'  Name.Variable
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
'\n                    ' Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n                   ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'type-expand" Literal.String.Symbol
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'and'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'consp'       Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'symbolp'     Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n             ' Text.Whitespace
'('           Punctuation
'case'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
'\n               ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'SATISFIES'   Name.Variable
' '           Text.Whitespace
'MEMBER'      Name.Variable
' '           Text.Whitespace
'EQL'         Name.Variable
' '           Text.Whitespace
'NOT'         Name.Variable
' '           Text.Whitespace
'AND'         Name.Variable
' '           Text.Whitespace
'OR'          Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n               ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'cond'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'('           Punctuation
'get'         Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'first'       Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
' '           Text.Whitespace
"'TYPE-LIST"  Literal.String.Symbol
')'           Punctuation
'\n                         ' Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n                        ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'type-expand" Literal.String.Symbol
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
'('           Punctuation
'clos::defined-class-p' Name.Variable
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'values'      Name.Builtin
' '           Text.Whitespace
'typespec'    Name.Variable
' '           Text.Whitespace
'nil'         Name.Constant
')'           Punctuation
')'           Punctuation
'\n            ' Text.Whitespace
'('           Punctuation
't'           Name.Constant
' '           Text.Whitespace
'('           Punctuation
'typespec-error' Name.Variable
' '           Text.Whitespace
"'type-expand" Literal.String.Symbol
' '           Text.Whitespace
'typespec'    Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

';; ============================================================================' Comment.Single
'\n\n'        Text.Whitespace

'('           Punctuation
'unless'      Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'clos::funcallable-instance-p' Name.Variable
' '           Text.Whitespace
"#'"          Name.Function
'clos::class-name' Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'fmakunbound' Name.Builtin
' '           Text.Whitespace
"'clos::class-name" Literal.String.Symbol
')'           Punctuation
')'           Punctuation
'\n\n\n'      Text.Whitespace

'('           Punctuation
'keywordp'    Name.Builtin
' '           Text.Whitespace
':junk'       Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'T'           Name.Constant
'\n\n'        Text.Whitespace

'('           Punctuation
'keywordp'    Name.Builtin
' '           Text.Whitespace
'::junk'      Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'T'           Name.Constant
'\n\n'        Text.Whitespace

'('           Punctuation
'symbol-name' Name.Builtin
' '           Text.Whitespace
'::junk'      Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'"JUNK"'      Literal.String
'\n\n'        Text.Whitespace

'('           Punctuation
'symbol-name' Name.Builtin
' '           Text.Whitespace
':#junk'      Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'"#JUNK"'     Literal.String
'\n\n'        Text.Whitespace

'('           Punctuation
'symbol-name' Name.Builtin
' '           Text.Whitespace
':#.junk'     Literal.String.Symbol
')'           Punctuation
'\n  '        Text.Whitespace
'"#.JUNK"'    Literal.String
'\n'          Text.Whitespace
