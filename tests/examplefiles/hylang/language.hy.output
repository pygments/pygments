';;;; This contains some of the core Hy functions used' Comment.Single
'\n'          Text.Whitespace

';;;; to make functional programming slightly easier.' Comment.Single
'\n'          Text.Whitespace

';;;;'        Comment.Single
'\n\n\n'      Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'_numeric-check' Name.Variable
' '           Text.Whitespace
'['           Punctuation
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Function
' '           Text.Whitespace
'('           Punctuation
'numeric? '   Name.Builtin
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'raise'       Keyword
' '           Text.Whitespace
'('           Punctuation
'TypeError'   Name.Exception
' '           Text.Whitespace
'('           Punctuation
'.format'     Name.Function
' '           Text.Whitespace
'"{0!r} is not a number"' Literal.String
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'cycle '      Name.Builtin
'['           Punctuation
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Yield an infinite repetition of the items in coll"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'setv '       Keyword.Declaration
'seen'        Name.Variable
' '           Text.Whitespace
'['           Punctuation
']'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'.append'     Name.Function
' '           Text.Whitespace
'seen'        Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'while'       Keyword
' '           Text.Whitespace
'seen'        Name.Variable
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'seen'        Name.Variable
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'dec '        Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Decrement n by 1"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric-check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'-'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'distinct '   Name.Builtin
'['           Punctuation
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return a generator from the original collection with duplicates\n   removed"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'seen'        Name.Variable
' '           Text.Whitespace
'['           Punctuation
']'           Punctuation
']'           Punctuation
' '           Text.Whitespace
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'val'         Name.Variable
' '           Text.Whitespace
'citer'       Name.Variable
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'not_in'      Name.Function
' '           Text.Whitespace
'val'         Name.Variable
' '           Text.Whitespace
'seen'        Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'do'          Name.Function
'\n         ' Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'.append'     Name.Function
' '           Text.Whitespace
'seen'        Name.Variable
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'drop '       Name.Builtin
'['           Punctuation
'count'       Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Drop `count` elements from `coll` and yield back the rest"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'try'         Keyword
' '           Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'i'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'range'       Name.Builtin
' '           Text.Whitespace
'count'       Name.Variable
')'           Punctuation
']'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'next'        Name.Builtin
' '           Text.Whitespace
'citer'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n         ' Text.Whitespace
'('           Punctuation
'catch'       Name.Function
' '           Text.Whitespace
'['           Punctuation
'StopIteration' Name.Exception
']'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'citer'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'even? '      Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if n is an even number"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric-check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'='           Name.Function
' '           Text.Whitespace
'('           Punctuation
'%'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'filter'      Name.Builtin
' '           Text.Whitespace
'['           Punctuation
'pred'        Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return all elements from `coll` that pass `pred`"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'val'         Name.Variable
' '           Text.Whitespace
'citer'       Name.Variable
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'pred'        Name.Function
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'inc '        Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Increment n by 1"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric-check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'+'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'instance? '  Name.Builtin
'['           Punctuation
'klass'       Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'isinstance'  Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'klass'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'iterable? '  Name.Builtin
'['           Punctuation
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if x is iterable"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'try'         Keyword
' '           Text.Whitespace
'('           Punctuation
'do '         Keyword
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
' '           Text.Whitespace
'true'        Name.Variable
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'catch'       Name.Function
' '           Text.Whitespace
'['           Punctuation
'Exception'   Name.Exception
']'           Punctuation
' '           Text.Whitespace
'false'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'iterate '    Name.Builtin
'['           Punctuation
'f'           Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'setv '       Keyword.Declaration
'val'         Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'while'       Keyword
' '           Text.Whitespace
'true'        Name.Variable
'\n    '      Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'setv '       Keyword.Declaration
'val'         Name.Variable
' '           Text.Whitespace
'('           Punctuation
'f'           Name.Function
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'iterator? '  Name.Builtin
'['           Punctuation
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if x is an iterator"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'try'         Keyword
' '           Text.Whitespace
'('           Punctuation
'='           Name.Function
' '           Text.Whitespace
'x'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n       '   Text.Whitespace
'('           Punctuation
'catch'       Name.Function
' '           Text.Whitespace
'['           Punctuation
'TypeError'   Name.Exception
']'           Punctuation
' '           Text.Whitespace
'false'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'neg? '       Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if n is < 0"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric-check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'<'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'none? '      Name.Builtin
'['           Punctuation
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if x is None"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'is '         Keyword
'x'           Name.Variable
' '           Text.Whitespace
'None'        Keyword.Constant
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'numeric? '   Name.Builtin
'['           Punctuation
'x'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'import '     Keyword
'numbers'     Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'instance? '  Name.Builtin
'numbers.Number' Name.Variable
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'nth '        Name.Builtin
'['           Punctuation
'coll'        Name.Variable
' '           Text.Whitespace
'index'       Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return nth item in collection or sequence, counting from 0"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Function
' '           Text.Whitespace
'('           Punctuation
'neg? '       Name.Builtin
'index'       Name.Variable
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'iterable? '  Name.Builtin
'coll'        Name.Variable
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'try'         Keyword
' '           Text.Whitespace
'('           Punctuation
'first '      Keyword
'('           Punctuation
'list'        Name.Builtin
' '           Text.Whitespace
'('           Punctuation
'take '       Name.Builtin
'1'           Literal.Number.Integer
' '           Text.Whitespace
'('           Punctuation
'drop '       Name.Builtin
'index'       Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'catch'       Name.Function
' '           Text.Whitespace
'['           Punctuation
'IndexError'  Name.Exception
']'           Punctuation
' '           Text.Whitespace
'None'        Keyword.Constant
')'           Punctuation
')'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'try'         Keyword
' '           Text.Whitespace
'('           Punctuation
'get '        Keyword
'coll'        Name.Variable
' '           Text.Whitespace
'index'       Name.Variable
')'           Punctuation
'\n           ' Text.Whitespace
'('           Punctuation
'catch'       Name.Function
' '           Text.Whitespace
'['           Punctuation
'IndexError'  Name.Exception
']'           Punctuation
' '           Text.Whitespace
'None'        Keyword.Constant
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'None'        Keyword.Constant
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'odd? '       Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if n is an odd number"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric-check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'='           Name.Function
' '           Text.Whitespace
'('           Punctuation
'%'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'2'           Literal.Number.Integer
')'           Punctuation
' '           Text.Whitespace
'1'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'pos? '       Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if n is > 0"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric_check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'>'           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'remove '     Name.Builtin
'['           Punctuation
'pred'        Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return coll with elements removed that pass `pred`"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'val'         Name.Variable
' '           Text.Whitespace
'citer'       Name.Variable
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'not'         Name.Function
' '           Text.Whitespace
'('           Punctuation
'pred'        Name.Function
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'repeat '     Name.Builtin
'['           Punctuation
'x'           Name.Variable
' '           Text.Whitespace
'&'           Operator
'optional'    Name.Variable
' '           Text.Whitespace
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Yield x forever or optionally n times"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'none? '      Name.Builtin
'n'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'setv '       Keyword.Declaration
'dispatch'    Name.Variable
' '           Text.Whitespace
'('           Punctuation
'fn '         Keyword.Declaration
'['           Punctuation
']'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'while'       Keyword
' '           Text.Whitespace
'true'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'setv '       Keyword.Declaration
'dispatch'    Name.Variable
' '           Text.Whitespace
'('           Punctuation
'fn '         Keyword.Declaration
'['           Punctuation
']'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'_'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'range'       Name.Builtin
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
']'           Punctuation
' '           Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'x'           Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'dispatch'    Name.Function
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'repeatedly ' Name.Builtin
'['           Punctuation
'func'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Yield result of running func repeatedly"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'while'       Keyword
' '           Text.Whitespace
'true'        Name.Variable
'\n    '      Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'('           Punctuation
'func'        Name.Function
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'take '       Name.Builtin
'['           Punctuation
'count'       Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Take `count` elements from `coll`, or the whole set if the total\n    number of entries in `coll` is less than `count`."' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'_'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'range'       Name.Builtin
' '           Text.Whitespace
'count'       Name.Variable
')'           Punctuation
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'('           Punctuation
'next'        Name.Builtin
' '           Text.Whitespace
'citer'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'take-nth'    Name.Variable
' '           Text.Whitespace
'['           Punctuation
'n'           Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return every nth member of coll\n     raises ValueError for (not (pos? n))"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'pos? '       Name.Builtin
'n'           Name.Variable
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
' '           Text.Whitespace
'['           Punctuation
'skip'        Name.Variable
' '           Text.Whitespace
'('           Punctuation
'dec '        Name.Builtin
'n'           Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'val'         Name.Variable
' '           Text.Whitespace
'citer'       Name.Variable
']'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'_'           Name.Variable
' '           Text.Whitespace
'('           Punctuation
'range'       Name.Builtin
' '           Text.Whitespace
'skip'        Name.Variable
')'           Punctuation
']'           Punctuation
'\n          ' Text.Whitespace
'('           Punctuation
'next'        Name.Builtin
' '           Text.Whitespace
'citer'       Name.Variable
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'raise'       Keyword
' '           Text.Whitespace
'('           Punctuation
'ValueError'  Name.Exception
' '           Text.Whitespace
'"n must be positive"' Literal.String
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'take-while'  Name.Variable
' '           Text.Whitespace
'['           Punctuation
'pred'        Name.Variable
' '           Text.Whitespace
'coll'        Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Take all elements while `pred` is true"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'let '        Keyword
'['           Punctuation
'['           Punctuation
'citer'       Name.Variable
' '           Text.Whitespace
'('           Punctuation
'iter'        Name.Builtin
' '           Text.Whitespace
'coll'        Name.Variable
')'           Punctuation
']'           Punctuation
']'           Punctuation
'\n    '      Text.Whitespace
'('           Punctuation
'for'         Keyword
' '           Text.Whitespace
'['           Punctuation
'val'         Name.Variable
' '           Text.Whitespace
'citer'       Name.Variable
']'           Punctuation
'\n      '    Text.Whitespace
'('           Punctuation
'if'          Keyword
' '           Text.Whitespace
'('           Punctuation
'pred'        Name.Function
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'yield'       Keyword
' '           Text.Whitespace
'val'         Name.Variable
')'           Punctuation
'\n        '  Text.Whitespace
'('           Punctuation
'break'       Keyword
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'defn '       Keyword.Declaration
'zero? '      Name.Builtin
'['           Punctuation
'n'           Name.Variable
']'           Punctuation
'\n  '        Text.Whitespace
'"Return true if n is 0"' Literal.String
'\n  '        Text.Whitespace
'('           Punctuation
'_numeric_check' Name.Function
' '           Text.Whitespace
'n'           Name.Variable
')'           Punctuation
'\n  '        Text.Whitespace
'('           Punctuation
'='           Name.Function
' '           Text.Whitespace
'n'           Name.Variable
' '           Text.Whitespace
'0'           Literal.Number.Integer
')'           Punctuation
')'           Punctuation
'\n\n'        Text.Whitespace

'('           Punctuation
'def '        Keyword.Declaration
'*exports*'   Name.Variable
' '           Text.Whitespace
'['           Punctuation
'"cycle"'     Literal.String
' '           Text.Whitespace
'"dec"'       Literal.String
' '           Text.Whitespace
'"distinct"'  Literal.String
' '           Text.Whitespace
'"drop"'      Literal.String
' '           Text.Whitespace
'"even?"'     Literal.String
' '           Text.Whitespace
'"filter"'    Literal.String
' '           Text.Whitespace
'"inc"'       Literal.String
'\n                ' Text.Whitespace
'"instance?"' Literal.String
' '           Text.Whitespace
'"iterable?"' Literal.String
' '           Text.Whitespace
'"iterate"'   Literal.String
' '           Text.Whitespace
'"iterator?"' Literal.String
' '           Text.Whitespace
'"neg?"'      Literal.String
'\n                ' Text.Whitespace
'"none?"'     Literal.String
' '           Text.Whitespace
'"nth"'       Literal.String
' '           Text.Whitespace
'"numeric?"'  Literal.String
' '           Text.Whitespace
'"odd?"'      Literal.String
' '           Text.Whitespace
'"pos?"'      Literal.String
' '           Text.Whitespace
'"remove"'    Literal.String
' '           Text.Whitespace
'"repeat"'    Literal.String
'\n                ' Text.Whitespace
'"repeatedly"' Literal.String
' '           Text.Whitespace
'"take"'      Literal.String
' '           Text.Whitespace
'"take_nth"'  Literal.String
' '           Text.Whitespace
'"take_while"' Literal.String
' '           Text.Whitespace
'"zero?"'     Literal.String
']'           Punctuation
')'           Punctuation
'\n'          Text.Whitespace
