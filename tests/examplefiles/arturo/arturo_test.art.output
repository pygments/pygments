'#! home/.arturo/bin' Comment.Hashbang
'\n'          Text

'\n'          Text

'; this is a comment' Comment.Single
'\n'          Text

'; this is another comment' Comment.Single
'\n'          Text

'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'; VARIABLES & VALUES' Comment.Single
'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'\n'          Text

'; numbers'   Comment.Single
'\n'          Text

'a1:'         Name.Label
' 2'          Literal.Number.Integer
'\n'          Text

'a2:'         Name.Label
' 3.14'       Literal.Number.Float
'\n'          Text

'a3:'         Name.Label
' '           Text
'to'          Name.Builtin
' '           Text
':complex'    Keyword.Type
' '           Text
'[1'          Literal.Number.Integer
' 2.0'        Literal.Number.Float
']'           Punctuation
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; 1.0+2.0i'  Comment.Single
'\n'          Text

'\n'          Text

'; strings'   Comment.Single
'\n'          Text

'c1:'         Name.Label
' '           Text
'"'           Literal.String.Double
'this is a string' Literal.String
'"'           Literal.String.Double
'\n'          Text

'c2:'         Name.Label
' '           Text
'{'           Literal.String.Single
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
't'           Literal.String
'h'           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'a'           Literal.String
' '           Literal.String
'm'           Literal.String
'u'           Literal.String
'l'           Literal.String
't'           Literal.String
'i'           Literal.String
'l'           Literal.String
'i'           Literal.String
'n'           Literal.String
'e'           Literal.String
' '           Literal.String
's'           Literal.String
't'           Literal.String
'r'           Literal.String
'i'           Literal.String
'n'           Literal.String
'g'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
't'           Literal.String
'h'           Literal.String
'a'           Literal.String
't'           Literal.String
' '           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'i'           Literal.String
'n'           Literal.String
'd'           Literal.String
'e'           Literal.String
'n'           Literal.String
't'           Literal.String
'a'           Literal.String
't'           Literal.String
'i'           Literal.String
'o'           Literal.String
'n'           Literal.String
'-'           Literal.String
'a'           Literal.String
'g'           Literal.String
'n'           Literal.String
'o'           Literal.String
's'           Literal.String
't'           Literal.String
'i'           Literal.String
'c'           Literal.String
'\n'          Literal.String

'}'           Literal.String.Single
'\n'          Text

'\n'          Text

'c3:'         Name.Label
' '           Text
'{:'          Literal.String.Double
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
't'           Literal.String
'h'           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'i'           Literal.String
's'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
'a'           Literal.String
' '           Literal.String
'v'           Literal.String
'e'           Literal.String
'r'           Literal.String
'b'           Literal.String
'a'           Literal.String
't'           Literal.String
'i'           Literal.String
'm'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
'm'           Literal.String
'u'           Literal.String
'l'           Literal.String
't'           Literal.String
'i'           Literal.String
'l'           Literal.String
'i'           Literal.String
'n'           Literal.String
'e'           Literal.String
' '           Literal.String
's'           Literal.String
't'           Literal.String
'r'           Literal.String
'i'           Literal.String
'n'           Literal.String
'g'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
'w'           Literal.String
'h'           Literal.String
'i'           Literal.String
'c'           Literal.String
'h'           Literal.String
' '           Literal.String
'w'           Literal.String
'i'           Literal.String
'l'           Literal.String
'l'           Literal.String
' '           Literal.String
'r'           Literal.String
'e'           Literal.String
'm'           Literal.String
'a'           Literal.String
'i'           Literal.String
'n'           Literal.String
' '           Literal.String
'e'           Literal.String
'x'           Literal.String
'a'           Literal.String
'c'           Literal.String
't'           Literal.String
'l'           Literal.String
'y'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
'a'           Literal.String
's'           Literal.String
' '           Literal.String
't'           Literal.String
'h'           Literal.String
'e'           Literal.String
' '           Literal.String
'o'           Literal.String
'r'           Literal.String
'i'           Literal.String
'g'           Literal.String
'i'           Literal.String
'n'           Literal.String
'a'           Literal.String
'l'           Literal.String
'\n'          Literal.String

':}'          Literal.String.Double
'\n'          Text

'\n'          Text

'c4:'         Name.Label
' '           Text
'{'           Literal.String.Single
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
't'           Literal.String
'h'           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'i'           Literal.String
's'           Literal.String
' '           Literal.String
'a'           Literal.String
' '           Literal.String
'm'           Literal.String
'u'           Literal.String
'l'           Literal.String
't'           Literal.String
'i'           Literal.String
'l'           Literal.String
'i'           Literal.String
'n'           Literal.String
'e'           Literal.String
' '           Literal.String
's'           Literal.String
't'           Literal.String
'r'           Literal.String
'i'           Literal.String
'n'           Literal.String
'g'           Literal.String
'\n'          Literal.String

' '           Literal.String
' '           Literal.String
' '           Literal.String
' '           Literal.String
'w'           Literal.String
'i'           Literal.String
't'           Literal.String
'h'           Literal.String
' '           Literal.String
'|'           Literal.String.Interpol
'a'           Text
'1'           Text
'|'           Literal.String.Interpol
' '           Literal.String
'l'           Literal.String
'i'           Literal.String
'n'           Literal.String
'e'           Literal.String
's'           Literal.String
'.'           Literal.String
'\n'          Literal.String

'}'           Literal.String.Single
'\n'          Text

'\n'          Text

'annotatedStrings:' Name.Label
' '           Text
'{'           Literal.String.Double
'!'           Literal.String.Interpol
'md'          Literal.String.Interpol
'\n'          Text.Whitespace

' '           Text
' '           Text
' '           Text
' '           Text
'#'           Text
' '           Text
'This'        Text
' '           Text
'is'          Text
' '           Text
'a'           Text
' '           Text
'markdown'    Text
' '           Text
'example'     Text
'\n'          Text

'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
"I'm"         Text
' '           Text
'a'           Text
' '           Text
'paragraph'   Text
'\n'          Text

'\n    > '    Keyword
"I'm a blockquote\n" Generic.Emph

'\n    ```'   Literal.String.Backtick
'c'           Literal.String.Backtick
'\n'          Text

'    '        Text.Whitespace
'#'           Comment.Preproc
'include'     Comment.Preproc
' '           Text.Whitespace
'<stdio.h>'   Comment.PreprocFile
'\n'          Comment.Preproc

'    '        Text.Whitespace
'int'         Keyword.Type
' '           Text.Whitespace
'main'        Name.Function
'('           Punctuation
')'           Punctuation
' '           Text.Whitespace
'{'           Punctuation
'\n'          Text.Whitespace

'        '    Text.Whitespace
'char'        Keyword.Type
' '           Text.Whitespace
'*'           Operator
' '           Text.Whitespace
'name'        Name
' '           Text.Whitespace
'='           Operator
' '           Text.Whitespace
'"'           Literal.String
'World'       Literal.String
'"'           Literal.String
';'           Punctuation
'\n'          Text.Whitespace

'        '    Text.Whitespace
'printf'      Name
'('           Punctuation
'"'           Literal.String
'Hello, %s!'  Literal.String
'"'           Literal.String
','           Punctuation
' '           Text.Whitespace
'name'        Name
')'           Punctuation
';'           Punctuation
'\n'          Text.Whitespace

'        '    Text.Whitespace
'printf'      Name
'('           Punctuation
' '           Text.Whitespace
'"'           Literal.String
"I'm a highlighted C code" Literal.String
'"'           Literal.String
'\n'          Text.Whitespace

'                ' Text.Whitespace
'"'           Literal.String
'inside Markdown highlighted code,' Literal.String
'"'           Literal.String
'\n'          Text.Whitespace

'                ' Text.Whitespace
'"'           Literal.String
'inside Arturo. Awesome!' Literal.String
'"'           Literal.String
'\n'          Text.Whitespace

'            ' Text.Whitespace
')'           Punctuation
';'           Punctuation
'\n'          Text.Whitespace

'        '    Text.Whitespace
'return'      Keyword
' '           Text.Whitespace
'0'           Literal.Number.Integer
';'           Punctuation
'\n'          Text.Whitespace

'    '        Text.Whitespace
'}'           Punctuation
'\n'          Text.Whitespace

'    ```\n'   Literal.String.Backtick

'}'           Literal.String.Double
'\n'          Text

'\n'          Text

'smartString:' Name.Label
' '           Text
'»'           Literal.String.Single
"I'm a string until the end of line    ; I'm not a comment" Literal.String
'\n'          Literal.String.Single

'safeString:' Name.Label
' '           Text
'«««'         Literal.String.Double
"I'm a safe string. 🙂" Literal.String
'»»»'         Literal.String.Double
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
"; I'm a comment" Comment.Single
'\n'          Text

'\n'          Text

'; characters' Comment.Single
'\n'          Text

'ch:'         Name.Label
' '           Text
'`c`'         Literal.String.Char
'\n'          Text

'\n'          Text

'; blocks/arrays' Comment.Single
'\n'          Text

'd:'          Name.Label
' '           Text
'[1'          Literal.Number.Integer
' 2'          Literal.Number.Integer
' 3'          Literal.Number.Integer
']'           Punctuation
'\n'          Text

'\n'          Text

'; dictionaries' Comment.Single
'\n'          Text

'e:'          Name.Label
' '           Text
'#'           Operator
'['           Punctuation
'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
'name:'       Name.Label
' '           Text
'"'           Literal.String.Double
'John'        Literal.String
'"'           Literal.String.Double
'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
'surname:'    Name.Label
' '           Text
'"'           Literal.String.Double
'Doe'         Literal.String
'"'           Literal.String.Double
'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
'age:'        Name.Label
' 34'         Literal.Number.Integer
'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
'likes:'      Name.Label
' '           Text
'['           Punctuation
'p'           Text
'i'           Text
'z'           Text
'z'           Text
'a'           Text
' '           Text
's'           Text
'p'           Text
'a'           Text
'g'           Text
'h'           Text
'e'           Text
't'           Text
't'           Text
'i'           Text
']'           Punctuation
'\n'          Text

']'           Punctuation
'\n'          Text

'\n'          Text

'; yes, functions are values too' Comment.Single
'\n'          Text

'f:'          Name.Label
' '           Text
'function'    Name.Builtin
' '           Text
'['           Punctuation
'x'           Text
']'           Punctuation
'['           Punctuation
'\n'          Text

' '           Text
' '           Text
' '           Text
' 2'          Literal.Number.Integer
' '           Text
'*'           Operator
' '           Text
'x'           Text
'\n'          Text

']'           Punctuation
'\n'          Text

'\n'          Text

'; colors - right, you can directly define them as well!' Comment.Single
'\n'          Text

'g1:'         Name.Label
' '           Text
'#red'        Name.Constant
'\n'          Text

'g2:'         Name.Label
' '           Text
'#0077BF'     Name.Constant
'\n'          Text

'\n'          Text

'; dates'     Comment.Single
'\n'          Text

'h:'          Name.Label
' '           Text
'now'         Name.Builtin
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; 2021-05-03T17:10:48+02:00' Comment.Single
'\n'          Text

'\n'          Text

'; logical values' Comment.Single
'\n'          Text

'i1:'         Name.Label
' '           Text
'true'        Name.Constant
'\n'          Text

'i2:'         Name.Label
' '           Text
'false'       Name.Constant
'\n'          Text

'i3:'         Name.Label
' '           Text
'maybe'       Name.Constant
'\n'          Text

'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'; BASIC OPERATORS' Comment.Single
'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'\n'          Text

'; simple arithmetic' Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'+'           Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 2'      Comment.Single
'\n8'         Literal.Number.Integer
' '           Text
'-'           Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 7'      Comment.Single
'\n4.2'       Literal.Number.Float
' '           Text
'-'           Operator
' 1.1'        Literal.Number.Float
' '           Text
' '           Text
' '           Text
'; => 3.1'    Comment.Single
'\n10'        Literal.Number.Integer
' '           Text
'*'           Operator
' 2'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 20'     Comment.Single
'\n35'        Literal.Number.Integer
' '           Text
'/'           Text
' 4'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 8'      Comment.Single
'\n35'        Literal.Number.Integer
' '           Text
'/'           Text
'/'           Text
' 4'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 8.75'   Comment.Single
'\n2'         Literal.Number.Integer
' '           Text
'^'           Operator
' 5'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 32'     Comment.Single
'\n5'         Literal.Number.Integer
' '           Text
'%'           Operator
' 3'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 2'      Comment.Single
'\n'          Text

'\n'          Text

'; bitwise operators' Comment.Single
'\n'          Text

'and'         Name.Builtin
' 3'          Literal.Number.Integer
' 5'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 1'      Comment.Single
'\n'          Text

'or'          Name.Builtin
' 3'          Literal.Number.Integer
' 5'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 7'      Comment.Single
'\n'          Text

'xor'         Name.Builtin
' 3'          Literal.Number.Integer
' 5'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 6'      Comment.Single
'\n'          Text

'\n'          Text

'; pre-defined constants' Comment.Single
'\n'          Text

'pi'          Name.Builtin
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 3.141592653589793' Comment.Single
'\n'          Text

'epsilon'     Name.Builtin
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => 2.718281828459045' Comment.Single
'\n'          Text

'null'        Name.Builtin
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => null'   Comment.Single
'\n'          Text

'true'        Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n'          Text

'false'       Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n'          Text

'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'; COMPARISON OPERATORS' Comment.Single
'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'\n'          Text

'; equality'  Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'='           Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n2'         Literal.Number.Integer
' '           Text
'='           Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n'          Text

'\n'          Text

'; inequality' Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'<>'          Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n2'         Literal.Number.Integer
' '           Text
'<>'          Operator
' 1'          Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n'          Text

'\n'          Text

'; more comparisons' Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'<'           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'='           Operator
'<'           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n10'        Literal.Number.Integer
' '           Text
'='           Operator
'<'           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'>'           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n1'         Literal.Number.Integer
' '           Text
'>'           Operator
'='           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n11'        Literal.Number.Integer
' '           Text
'>'           Operator
'='           Operator
' 10'         Literal.Number.Integer
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n'          Text

'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'; CONDITIONALS' Comment.Single
'\n'          Text

';---------------------------------' Comment.Single
'\n'          Text

'\n'          Text

'; logical operators' Comment.Single
'\n'          Text

'and?'        Name.Builtin
' '           Text
'true'        Name.Constant
' '           Text
'true'        Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n'          Text

'and?'        Name.Builtin
' '           Text
'true'        Name.Constant
' '           Text
'false'       Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n'          Text

'or?'         Name.Builtin
' '           Text
'true'        Name.Constant
' '           Text
'false'       Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => true'   Comment.Single
'\n'          Text

'or?'         Name.Builtin
' '           Text
'false'       Name.Constant
' '           Text
'false'       Name.Constant
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n'          Text

'\n'          Text

'and?'        Name.Builtin
' '           Text
'[1'          Literal.Number.Integer
'=2'          Literal.Number.Integer
']'           Punctuation
'[2'          Literal.Number.Integer
'<3'          Literal.Number.Integer
']'           Punctuation
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; => false'  Comment.Single
'\n'          Text

' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
' '           Text
'; (the second block will not be evaluated)' Comment.Single
'\n'          Text

'\n'          Text

'; simple if statements' Comment.Single
'\n'          Text

'if'          Name.Builtin
' 2'          Literal.Number.Integer
' '           Text
'>'           Operator
' 1'          Literal.Number.Integer
' '           Text
'['           Punctuation
' '           Text
'print'       Name.Builtin
' '           Text
'"'           Literal.String.Double
'yes!'        Literal.String
'"'           Literal.String.Double
']'           Punctuation
' '           Text
' '           Text
' '           Text
' '           Text
'; yes!'      Comment.Single
'\n'          Text

'if'          Name.Builtin
' 3'          Literal.Number.Integer
' '           Text
'<>'          Operator
' 2'          Literal.Number.Integer
' '           Text
'->'          Name.Decorator
' '           Text
'print'       Name.Builtin
' '           Text
'"'           Literal.String.Double
'true!'       Literal.String
'"'           Literal.String.Double
' '           Text
' '           Text
'; true!'     Comment.Single
'\n'          Text

'\n'          Text

'; if/else statements' Comment.Single
'\n'          Text

'if?'         Name.Builtin
' 2'          Literal.Number.Integer
' '           Text
'>'           Operator
' 3'          Literal.Number.Integer
' '           Text
'->'          Name.Decorator
' '           Text
'print'       Name.Builtin
' '           Text
'"2'          Literal.Number.Integer
' '           Text
'i'           Text
's'           Text
' '           Text
'g'           Text
'r'           Text
'e'           Text
'a'           Text
't'           Text
'e'           Text
'r'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 3'          Literal.Number.Integer
'"'           Literal.String.Double
'\nelse -> print ' Literal.String
'"'           Literal.String.Double
'2'           Text
' '           Text
'i'           Text
's'           Text
' '           Text
'not'         Name.Builtin
' '           Text
'g'           Text
'r'           Text
'e'           Text
'a'           Text
't'           Text
'e'           Text
'r'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 3'          Literal.Number.Integer
'"'           Literal.String.Double
'         ; 2 is not greater than 3\n\n; switch statements\nswitch 2 > 3 -> print ' Literal.String
'"'           Literal.String.Double
'2'           Text
' '           Text
'i'           Text
's'           Text
' '           Text
'g'           Text
'r'           Text
'e'           Text
'a'           Text
't'           Text
'e'           Text
'r'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 3'          Literal.Number.Integer
'"'           Literal.String.Double
'\n             -> print ' Literal.String
'"'           Literal.String.Double
'2'           Text
' '           Text
'i'           Text
's'           Text
' '           Text
'not'         Name.Builtin
' '           Text
'g'           Text
'r'           Text
'e'           Text
'a'           Text
't'           Text
'e'           Text
'r'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 3'          Literal.Number.Integer
'"'           Literal.String.Double
' ; 2 is not greater than 3\n\na: (2 > 3)[' Literal.String
'"'           Literal.String.Double
'y'           Text
'e'           Text
's'           Text
'"'           Literal.String.Double
']['          Literal.String
'"'           Literal.String.Double
'n'           Text
'o'           Text
'"'           Literal.String.Double
']         ; a: ' Literal.String
'"'           Literal.String.Double
'n'           Text
'o'           Text
'"'           Literal.String.Double
'\na: (2 > 3)? -> ' Literal.String
'"'           Literal.String.Double
'y'           Text
'e'           Text
's'           Text
'"'           Literal.String.Double
' -> '        Literal.String
'"'           Literal.String.Double
'n'           Text
'o'           Text
'"'           Literal.String.Double
'    ; a: '   Literal.String
'"'           Literal.String.Double
'n'           Text
'o'           Text
'"'           Literal.String.Double
' (exactly the same as above)\n\n; case/when statements\ncase [1]\n    when? [>2] -> print ' Literal.String
'"'           Literal.String.Double
'1'           Text
' '           Text
'i'           Text
's'           Text
' '           Text
'g'           Text
'r'           Text
'e'           Text
'a'           Text
't'           Text
'e'           Text
'r'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 2'          Literal.Number.Integer
'.'           Operator
' '           Text
'w'           Text
'h'           Text
'a'           Text
't'           Text
'?'           Text
'!'           Operator
'"'           Literal.String.Double
'\n    when? [<0] -> print ' Literal.String
'"'           Literal.String.Double
'1'           Text
' '           Text
'i'           Text
's'           Text
' '           Text
'l'           Text
'e'           Text
's'           Text
's'           Text
' '           Text
't'           Text
'h'           Text
'a'           Text
'n'           Text
' 0'          Literal.Number.Integer
'.'           Operator
' '           Text
'n'           Text
'o'           Text
'p'           Text
'e'           Text
'..'          Operator
'.'           Operator
'"'           Literal.String.Double
'\n    else -> print ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'r'           Text
'e'           Text
' '           Text
'w'           Text
'e'           Text
' '           Text
'a'           Text
'r'           Text
'e'           Text
'!'           Operator
'"'           Literal.String.Double
"                ; here we are!\n\n;---------------------------------\n; LOOPS\n;---------------------------------\n\n; with `loop`\narr: [1 4 5 3]\nloop arr 'x [\n    print [" Literal.String
'"'           Literal.String.Double
'x'           Text
' '           Text
'='           Operator
'"'           Literal.String.Double
" x]\n]\n; x = 1\n; x = 4\n; x = 5\n; x = 3\n\n; with loop and custom index\nloop.with:'i arr 'x [\n    print [" Literal.String
'"'           Literal.String.Double
'i'           Text
't'           Text
'e'           Text
'm'           Text
' '           Text
'a'           Text
't'           Text
' '           Text
'p'           Text
'o'           Text
's'           Text
'i'           Text
't'           Text
'i'           Text
'o'           Text
'n'           Text
'"'           Literal.String.Double
' i '         Literal.String
'"'           Literal.String.Double
'='           Operator
'>'           Operator
'"'           Literal.String.Double
" x]\n]\n; item at position 0 => 1\n; item at position 1 => 4\n; item at position 2 => 5\n; item at position 3 => 3\n\n; using ranges\nloop 1..3 'x ->         ; since it's a single statement\n    print x             ; there's no need for [block] notation\n                        ; we can wrap it up using the `->` syntactic sugar\n\nloop `a`..`c` 'ch ->\n    print ch\n; a\n; b\n; c\n\n; picking multiple items\nloop 1..10 [x y] ->\n    print [" Literal.String
'"'           Literal.String.Double
'x'           Text
' '           Text
'='           Operator
'"'           Literal.String.Double
' x '         Literal.String
'"'           Literal.String.Double
','           Punctuation
' '           Text
'y'           Text
' '           Text
'='           Operator
'"'           Literal.String.Double
' y]\n; x = 1 , y = 2\n; x = 3 , y = 4\n; x = 5 , y = 6\n; x = 7 , y = 8\n; x = 9 , y = 10\n\n; looping through a dictionary\ndict: #[name: ' Literal.String
'"'           Literal.String.Double
'J'           Text
'o'           Text
'h'           Text
'n'           Text
'"'           Literal.String.Double
', surname: ' Literal.String
'"'           Literal.String.Double
'D'           Text
'o'           Text
'e'           Text
'"'           Literal.String.Double
', age: 34]\nloop dict [key value][\n    print [key ' Literal.String
'"'           Literal.String.Double
'->'          Name.Decorator
'"'           Literal.String.Double
' value]\n]\n; name -> John\n; surname -> Doe\n; age -> 34\n\n; while loops\ni: new 0\nwhile [i<3][\n    print [' Literal.String
'"'           Literal.String.Double
'i'           Text
' '           Text
'='           Operator
'"'           Literal.String.Double
" i]\n    inc 'i\n]\n; i = 0\n; i = 1\n; i = 2\n\n;---------------------------------\n; STRINGS\n;---------------------------------\n\n; case\na: " Literal.String
'"'           Literal.String.Double
't'           Text
'H'           Text
'i'           Text
's'           Text
' '           Text
'I'           Text
's'           Text
' '           Text
'a'           Text
' '           Text
's'           Text
't'           Text
'R'           Text
'i'           Text
'n'           Text
'G'           Text
'"'           Literal.String.Double
'\nprint upper a               ; THIS IS A STRING\nprint lower a               ; this is a string\nprint capitalize a          ; THis Is a stRinG\n\n; concatenation\na: ' Literal.String
'"'           Literal.String.Double
'H'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
' '           Text
'"'           Literal.String.Double
' ++ '        Literal.String
'"'           Literal.String.Double
'W'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'!'           Operator
'"'           Literal.String.Double
'     ; a: '  Literal.String
'"'           Literal.String.Double
'H'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
' '           Text
'W'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'!'           Operator
'"'           Literal.String.Double
'\n\n; strings as an array\nsplit ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
'               ; => [h e l l o]\nsplit.words ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
' '           Text
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
'   ; => [hello world]\n\nprint first ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
'         ; h\nprint last ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
'          ; o\n\n; conversion\nto :string 123              ; => ' Literal.String
'"'           Literal.String.Double
'1'           Text
'2'           Text
'3'           Text
'"'           Literal.String.Double
'\nto :integer ' Literal.String
'"'           Literal.String.Double
'1'           Text
'2'           Text
'3'           Text
'"'           Literal.String.Double
'           ; => 123\n\n; joining strings together\njoin [' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
']              ; => ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
'\njoin.with:' Literal.String
'"'           Literal.String.Double
'-'           Operator
'"'           Literal.String.Double
' ['          Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
']     ; => ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'-'           Operator
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
'\n\n; string interpolation\nx: 2\nprint ~' Literal.String
'"'           Literal.String.Double
'x'           Text
' '           Text
'='           Operator
' '           Text
'|'           Name.Decorator
'x'           Text
'|'           Name.Decorator
'"'           Literal.String.Double
'            ; x = 2\n\n; interpolation with `print`\nprint [' Literal.String
'"'           Literal.String.Double
'x'           Text
' '           Text
'='           Operator
'"'           Literal.String.Double
' x]             ; x = 2\n                            ; (`print` works by calculating the given block\n                            ;  and joining the different values as strings\n                            ;  with a single space between them)\n\n; templates\nprint render.template {\n    <' Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
'= switch x=2 [ ' Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
'>\n        Yes, x = 2\n    <' Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
']['          Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
'>\n        No, x is not 2\n    <' Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
']'           Literal.String
'|'           Literal.String.Interpol
'|'           Literal.String.Interpol
'>\n} ; Yes, x = 2\n\n; matching\nprefix? ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'"'           Literal.String.Double
'        ; => true\nsuffix? ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'"'           Literal.String.Double
'        ; => false\n\ncontains? ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'l'           Text
'l'           Text
'"'           Literal.String.Double
'      ; => true\ncontains? ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'"'           Literal.String.Double
'      ; => true\ncontains? ' Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'x'           Text
'"'           Literal.String.Double
'       ; => false\n\nin? ' Literal.String
'"'           Literal.String.Double
'l'           Text
'l'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
'            ; => true\nin? ' Literal.String
'"'           Literal.String.Double
'x'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'h'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
'             ; => false\n\n;---------------------------------\n; BLOCKS\n;---------------------------------\n\n; calculate a block\narr: [1 1+1 1+1+1]\n@arr                        ; => [1 2 3]\n\n; execute a block\nsth: [print ' Literal.String
'"'           Literal.String.Double
'H'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
' '           Text
'w'           Text
'o'           Text
'r'           Text
'l'           Text
'd'           Text
'"'           Literal.String.Double
']  ; this is perfectly valid,\n                            ; could contain *anything*\n                            ; and will not be executed...\n\ndo sth                      ; Hello world\n                            ; (...until we tell it to)\n\n; array indexing\narr: [' Literal.String
'"'           Literal.String.Double
'z'           Text
'e'           Text
'r'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'w'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
']\nprint first arr             ; zero\nprint arr\\0                 ; zero\nprint last arr              ; three\nprint arr\\3                 ; three\n\nx: 2\nprint get arr x             ; two\nprint arr\\[x]               ; two\n\n; setting an array element\narr\\0: ' Literal.String
'"'           Literal.String.Double
'n'           Text
'a'           Text
'd'           Text
'a'           Text
'"'           Literal.String.Double
'\nset arr 2 ' Literal.String
'"'           Literal.String.Double
'd'           Text
'o'           Text
's'           Text
'"'           Literal.String.Double
"\nprint arr                   ; nada one dos three\n\n; adding elements to an array\narr: new []\n'arr ++ " Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
"\n'arr ++ "  Literal.String
'"'           Literal.String.Double
't'           Text
'w'           Text
'o'           Text
'"'           Literal.String.Double
'\nprint arr                   ; one two\n\n; remove elements from an array\narr: new [' Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'w'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'f'           Text
'o'           Text
'u'           Text
'r'           Text
'"'           Literal.String.Double
"]\n'arr -- " Literal.String
'"'           Literal.String.Double
't'           Text
'w'           Text
'o'           Text
'"'           Literal.String.Double
'               ; arr: [' Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'f'           Text
'o'           Text
'u'           Text
'r'           Text
'"'           Literal.String.Double
"]\nremove 'arr .index 0        ; arr: [" Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'f'           Text
'o'           Text
'u'           Text
'r'           Text
'"'           Literal.String.Double
']\n\n; getting the size of an array\narr: [' Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' 2 '         Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' 4]\nprint size arr              ; 4\n\n; getting a slice of an array\nprint slice [' Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'w'           Text
'o'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'f'           Text
'o'           Text
'u'           Text
'r'           Text
'"'           Literal.String.Double
'] 0 1        ; one two\n\n; check if array contains a specific element\nprint contains? arr ' Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
'   ; true\nprint contains? arr ' Literal.String
'"'           Literal.String.Double
'f'           Text
'i'           Text
'v'           Text
'e'           Text
'"'           Literal.String.Double
"  ; false\n\n; sorting array\narr: [1 5 3 2 4]\nsort arr                    ; => [1 2 3 4 5]\nsort.descending arr         ; => [5 4 3 2 1]\n\n; mapping values\nmap 1..10 [x][2*x]          ; => [2 4 6 8 10 12 14 16 18 20]\nmap 1..10 'x -> 2*x         ; same as above\nmap 1..10 => [2*&]          ; same as above\nmap 1..10 => [2*]           ; same as above\n\n; selecting/filtering array values\nselect 1..10 [x][odd? x]    ; => [1 3 5 7 9]\nselect 1..10 => odd?        ; same as above\n\nfilter 1..10 => odd?        ; => [2 4 6 8 10]\n                            ; (now, we leave out all odd numbers -\n                            ;  while select keeps them)\n\n; misc operations\narr: [" Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' 2 '         Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' 4]\nreverse arr                 ; => [4 ' Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' 2 '         Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
']\nshuffle arr                 ; => [2 4 ' Literal.String
'"'           Literal.String.Double
't'           Text
'h'           Text
'r'           Text
'e'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'o'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
"]\nunique [1 2 3 2 3 1]        ; => [1 2 3]\npermutate [1 2 3]           ; => [[1 2 3] [1 3 2] [3 1 2] [2 1 3] [2 3 1] [3 2 1]]\ntake 1..10 3                ; => [1 2 3]\nrepeat [1 2] 3              ; => [1 2 1 2 1 2]\n\n;---------------------------------\n; FUNCTIONS\n;---------------------------------\n\n; declaring a function\nf: function [x][ 2*x ]\nf: function [x]-> 2*x       ; same as above\nf: $[x]->2*x                ; same as above (only using the `$` alias\n                            ;  for the `function`... function)\n\n; calling a function\nf 10                        ; => 20\n\n; returning a value\ng: function [x][\n    if x < 2 -> return 0\n\n    res: 0\n    loop 0..x 'z [\n        res: res + z\n    ]\n    return res\n]\n\n;---------------------------------\n; CUSTOM TYPES\n;---------------------------------\n\n; defining a custom type\ndefine :person [                            ; define a new custom type " Literal.String
'"'           Literal.String.Double
'P'           Text
'e'           Text
'r'           Text
's'           Text
'o'           Text
'n'           Text
'"'           Literal.String.Double
'\n    name                                    ; with fields: name, surname, age\n    surname\n    age\n][\n    ; with custom post-construction initializer\n    init: [\n        this\\name: capitalize this\\name\n    ]\n\n    ; custom print function\n    print: [\n        render ' Literal.String
'"'           Literal.String.Double
'NAME:'       Name.Label
' '           Text
'|'           Name.Decorator
't'           Text
'h'           Text
'i'           Text
's'           Text
'\\'          Operator
'n'           Text
'a'           Text
'm'           Text
'e'           Text
'|'           Name.Decorator
','           Punctuation
' '           Text
'SURNAME:'    Name.Label
' '           Text
'|'           Name.Decorator
't'           Text
'h'           Text
'i'           Text
's'           Text
'\\'          Operator
's'           Text
'u'           Text
'r'           Text
'n'           Text
'a'           Text
'm'           Text
'e'           Text
'|'           Name.Decorator
','           Punctuation
' '           Text
'AGE:'        Name.Label
' '           Text
'|'           Name.Decorator
't'           Text
'h'           Text
'i'           Text
's'           Text
'\\'          Operator
'a'           Text
'g'           Text
'e'           Text
'|'           Name.Decorator
'"'           Literal.String.Double
"\n    ]\n\n    ; custom comparison operator\n    compare: 'age\n]\n\n; create a method for our custom type\nsayHello: function [this][\n    ensure -> is? :person this\n\n    print [" Literal.String
'"'           Literal.String.Double
'H'           Text
'e'           Text
'l'           Text
'l'           Text
'o'           Text
'"'           Literal.String.Double
' this\\name]\n]\n\n; create new objects of our custom type\na: to :person [' Literal.String
'"'           Literal.String.Double
'J'           Text
'o'           Text
'h'           Text
'n'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'D'           Text
'o'           Text
'e'           Text
'"'           Literal.String.Double
" 34]                 ; let's create 2 " Literal.String
'"'           Literal.String.Double
'P'           Text
'e'           Text
'r'           Text
's'           Text
'o'           Text
'n'           Text
'"'           Literal.String.Double
's\nb: to :person [' Literal.String
'"'           Literal.String.Double
'j'           Text
'a'           Text
'n'           Text
'e'           Text
'"'           Literal.String.Double
' '           Literal.String
'"'           Literal.String.Double
'D'           Text
'o'           Text
'e'           Text
'"'           Literal.String.Double
' 33]                 ; and another one\n\n; call pseudo-inner method\nsayHello a                                      ; Hello John\nsayHello b                                      ; Hello Jane\n\n; access object fields\nprint [' Literal.String
'"'           Literal.String.Double
'T'           Text
'h'           Text
'e'           Text
' '           Text
'first'       Name.Builtin
' '           Text
'p'           Text
'e'           Text
'r'           Text
's'           Text
'o'           Text
'n'           Text
"'s"          Keyword.Declaration
' '           Text
'n'           Text
'a'           Text
'm'           Text
'e'           Text
' '           Text
'is:'         Name.Label
'"'           Literal.String.Double
" a\\name]    ; The first person's name is: John\nprint [" Literal.String
'"'           Literal.String.Double
'T'           Text
'h'           Text
'e'           Text
' '           Text
's'           Text
'e'           Text
'c'           Text
'o'           Text
'n'           Text
'd'           Text
' '           Text
'p'           Text
'e'           Text
'r'           Text
's'           Text
'o'           Text
'n'           Text
"'s"          Keyword.Declaration
' '           Text
'n'           Text
'a'           Text
'm'           Text
'e'           Text
' '           Text
'is:'         Name.Label
'"'           Literal.String.Double
" b\\name]   ; The second person's name is: Jane\n\n; changing object fields\na\\name: " Literal.String
'"'           Literal.String.Double
'B'           Text
'o'           Text
'b'           Text
'"'           Literal.String.Double
"\nsayHello a                                      ; Hello Bob\n\n; verifying object type\nprint type a                                    ; :person\nprint is? :person a                             ; true\n\n; printing objects\nprint a                                         ; NAME: John, SURNAME: Doe, AGE: 34\n\n; sorting user objects (using custom comparator)\nsort @[a b]                                     ; Jane..., John...\nsort.descending @[a b]                          ; John..., Jane...\n\neofString:\n---\nI'm an end of file\nMultiline string.\n" Literal.String
