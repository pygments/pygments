'# Suggest MOVE-BLOCK operators' Comment.Single
'\n'          Text.Whitespace

'# This production proposes operators that move one block ontop of another block.' Comment.Single
'\n'          Text.Whitespace

'# The conditions establish that:' Comment.Single
'\n'          Text.Whitespace

"#  1. The state has a problem-space named 'blocks'" Comment.Single
'\n'          Text.Whitespace

'#  2. The block moved and the block moved TO must be both be clear.' Comment.Single
'\n'          Text.Whitespace

'#  3. The block moved is different from the block moved to.' Comment.Single
'\n'          Text.Whitespace

'#  4. The block moved must be type block.' Comment.Single
'\n'          Text.Whitespace

'#  5. The block moved must not already be ontop the block being moved to.' Comment.Single
'\n'          Text.Whitespace

'# The actions:' Comment.Single
'\n'          Text.Whitespace

'#  1. create an acceptable preference for an operator.' Comment.Single
'\n'          Text.Whitespace

'#  2. create acceptable preferences for the substructure of the operator (its' Comment.Single
'\n'          Text.Whitespace

"#     name, its 'moving-block' and the 'destination)." Comment.Single
'\n\n'        Text.Whitespace

'sp'          Keyword.Reserved
' '           Text.Whitespace
'{'           Punctuation
'blocks-world*propose*move-block' Name.Function
'\n   '       Text.Whitespace
'('           Punctuation
'state'       Keyword.Reserved
' '           Text.Whitespace
'<s>'         Name
' '           Text.Whitespace
'^problem-space' Name.Variable
' '           Text.Whitespace
'blocks'      Literal
'\n              ' Text.Whitespace
'^thing'      Name.Variable
' '           Text.Whitespace
'<thing1>'    Name
' '           Text.Whitespace
'{'           Punctuation
'<>'          Operator
' '           Text.Whitespace
'<thing1>'    Name
' '           Text.Whitespace
'<thing2>'    Name
'}'           Punctuation
'\n              ' Text.Whitespace
'^ontop'      Name.Variable
' '           Text.Whitespace
'<ontop>'     Name
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<thing1>'    Name
' '           Text.Whitespace
'^type'       Name.Variable
' '           Text.Whitespace
'block'       Literal
' '           Text.Whitespace
'^clear'      Name.Variable
' '           Text.Whitespace
'yes'         Literal
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<thing2>'    Name
' '           Text.Whitespace
'^clear'      Name.Variable
' '           Text.Whitespace
'yes'         Literal
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<ontop>'     Name
' '           Text.Whitespace
'^top-block'  Name.Variable
' '           Text.Whitespace
'<thing1>'    Name
'\n            ' Text.Whitespace
'^bottom-block' Name.Variable
' '           Text.Whitespace
'<>'          Operator
' '           Text.Whitespace
'<thing2>'    Name
')'           Punctuation
'\n'          Text.Whitespace

'-->'         Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<s>'         Name
' '           Text.Whitespace
'^operator'   Name.Variable
' '           Text.Whitespace
'<o>'         Name
' '           Text.Whitespace
'+'           Operator
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<o>'         Name
' '           Text.Whitespace
'^name'       Name.Variable
' '           Text.Whitespace
'move-block'  Literal
'\n        '  Text.Whitespace
'^moving-block' Name.Variable
' '           Text.Whitespace
'<thing1>'    Name
'\n        '  Text.Whitespace
'^destination' Name.Variable
' '           Text.Whitespace
'<thing2>'    Name
')'           Punctuation
'}'           Punctuation
'\n\n'        Text.Whitespace

'# Make all acceptable move-block operators also indifferent' Comment.Single
'\n'          Text.Whitespace

'# The conditions establish that:' Comment.Single
'\n'          Text.Whitespace

'#  1. the state has an acceptable preference for an operator' Comment.Single
'\n'          Text.Whitespace

'#  2. the operator is named move-block' Comment.Single
'\n'          Text.Whitespace

'# The actions:' Comment.Single
'\n'          Text.Whitespace

'#  1. create an indifferent prefererence for the operator' Comment.Single
'\n\n'        Text.Whitespace

'sp'          Keyword.Reserved
' '           Text.Whitespace
'{'           Punctuation
'blocks-world*compare*move-block*indifferent' Name.Function
'\n   '       Text.Whitespace
'('           Punctuation
'state'       Keyword.Reserved
' '           Text.Whitespace
'<s>'         Name
' '           Text.Whitespace
'^operator'   Name.Variable
' '           Text.Whitespace
'<o>'         Name
' '           Text.Whitespace
'+'           Operator
')'           Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<o>'         Name
' '           Text.Whitespace
'^name'       Name.Variable
' '           Text.Whitespace
'move-block'  Literal
')'           Punctuation
'\n'          Text.Whitespace

'-->'         Punctuation
'\n   '       Text.Whitespace
'('           Punctuation
'<s>'         Name
' '           Text.Whitespace
'^operator'   Name.Variable
' '           Text.Whitespace
'<o>'         Name
' '           Text.Whitespace
'='           Operator
')'           Punctuation
'}'           Punctuation
'\n'          Text.Whitespace
